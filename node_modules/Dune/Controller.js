var Loader = require("./Loader");
var canvasContainer = require("./CanvasContainer");

var gameView = require("./View/Game");
var StartMenuView = require("./View/StartMenu");
var FactionSelectView = require("./View/FactionSelect");
var mapView = require("./View/Map");
var roundView = require("Dune/View/Round");

module.exports = new GameController();

function GameController() {

  var factionViews = {};
  var turnOrder;

  this.startGame = function() 
  {
    gameView.game.start();
    turnOrder = gameView.game.getTurnOrder();

    hideFactionSelectView();
    initViews();
    this.nextPlayerSetupTurn();
  }

  this.nextGameTurn = function() { this.nextPlayerSetupTurn() }

  function hideFactionSelectView()
  {
    var factionSelectView = new FactionSelectView();
    factionSelectView.hide();
  }

  function initViews() 
  {
    initFactionViews();
    initMapView();
  }

  function initFactionViews() 
  {
    for (var factionName in gameView.players) {
      var FactionView = getFactionViewConstructor(factionName);
      var factionView = new FactionView();
      factionView.loadImages();
      factionViews[factionName] = factionView;
    }
  }

  function initMapView() {
    mapView.show();
    mapView.loadImages();
  }

  function getFactionViewConstructor(factionName) {
    switch(factionName) {
      case "Atreides":
      	return require("./View/Faction/Atreides");
      case "Harkonnen":
      	return require("./View/Faction/Harkonnen");
      case "BeneGesserit":
      	return require("./View/Faction/BeneGesserit");
      case "Fremen":
      	return require("./View/Faction/Fremen");
      case "Guild":
      	return require("./View/Faction/Guild");
      case "Emperor":
      	return require("./View/Faction/Emperor");
      default:
      	throw new Error("Invalid faction view: "+factionName);
    }
  }


  this.setFactions = function (factionsArray) {
    for (var i = 0; i < factionsArray.length; i++) {
      var factionName = factionsArray[i];
      var player = gameView.game.selectPlayer(factionName);
      gameView.players[factionName] = player;
    }
  }


  this.nextPlayerSetupTurn = function() {
    var nextFaction = turnOrder.shift();

    if (! nextFaction) {
      //this.nextGameTurn = function() { this.nextPlayerTurn() }
      this.nextGameTurn = nextGameTurn;
      return
    }

    var factionView = factionViews[nextFaction.constructor.name];

    factionView.startSetupTurn();
  }  

  function nextGameTurn() 
  {
    console.log('next game turn');
    roundView.start();
  }

  this.nextPlayerTurn = function() {
    console.log('start regular turn');

    if (! turnOrder.length) {
      console.log('refreshing turn order');
      turnOrder = gameView.game.getTurnOrder();
    }

    var nextFaction = turnOrder.shift();

    var factionView = factionViews[nextFaction.constructor.name];
    factionView.startTurn();
  }

}
