module.exports = GameController;


function GameController() {

  var factions = [];
  var views = {};
  var turn = 0;
  var game = undefined;
  var traitorPool = new Array();
  var that = this;

  getStartMenuView();

  function getStartMenuView() {
    if (! views.startMenu) {
      var StartMenuView = require("./Views/StartMenu");
      views.startMenu = new StartMenuView(that);
    }

    return views.startMenu

  }

  this.startGame = function() {
    hideFactionSelectView();
    initNewGame();
    initFactionViews();
    initMapView();
    shuffleTurnOrder();
    makeTraitorPool();
    startInitialTurn();
  }

  function hideFactionSelectView() {
    var factionSelectView = that.getFactionSelectView();
    factionSelectView.hide();
  }

  this.hideStartMenuView = function() {
    var startMenuView = getStartMenuView();
    startMenuView.hide();
  }

  this.showFactionSelectView = function() {
    var factionSelectView = this.getFactionSelectView();
    factionSelectView.show();
  }

  this.getFactionSelectView = function() {
    if (! views.factionSelect) {
      var FactionSelectView = require("./Views/FactionSelect");
      views.factionSelect = new FactionSelectView(that);
    }

    return views.factionSelect;
  }

  function initNewGame() {
    var DuneGame = require("Dune/Game");
    that.setGame(new DuneGame());
  }

  this.getGame = function() { return game }
  this.setGame = function(newGame) { game = newGame }

  function initFactionViews() {
    var factionViews = new Array();

    for (var i = 0; i < factions.length; i++) {
      var FactionView = getFactionViewConstructor(factions[i]);
      factionViews.push(new FactionView(that));
    }

    setFactionViews(factionViews);
  }

  function getFactionViewConstructor(factionName) {
    switch(factionName) {
      case "Atreides":
      	return require("./Views/Factions/Atreides");
      case "Harkonnen":
      	return require("./Views/Factions/Harkonnen");
      case "BeneGesserit":
      	return require("./Views/Factions/BeneGesserit");
      case "Fremen":
      	return require("./Views/Factions/Fremen");
      case "Guild":
      	return require("./Views/Factions/Guild");
      case "Emperor":
      	return require("./Views/Factions/Emperor");
      default:
      	throw new Error("Invalid faction view: "+factionName);
    }
  }

  function setFactionViews(array) {
    views.factions = array;
  }

  function initMapView() {
    var mapView = that.getMapView();
    mapView.show();
  }

  this.debugSetFactions = function (factionsArray) {
  /* This is a debug function and should go away once gameplay finalized */
    factions = factionsArray;
  }



  this.getMapView = function() {
    if (! views.map) {
      var MapView = require("./Views/Map");
      views.map = new MapView();
    }

    return views.map
  }

  function shuffleTurnOrder() {
    var factionViews = getFactionViews();
    shuffleArray(factionViews);
    setFactionViews(factionViews);
  }

  function getFactionViews() {
    return views.factions;
  }

  function shuffleArray(array) {
    var currentIndex = array.length, 
    	temporaryValue, 
    	randomIndex;
    
    // While there remain elements to shuffle...
    while (0 !== currentIndex) {
      //Pick a remaining element
      randomIndex = Math.floor(Math.random() * currentIndex);
      currentIndex -= 1;
      // And swap it with the current element
      temporaryValue = array[currentIndex];
      array[currentIndex] = array[randomIndex];
      array[randomIndex] = temporaryValue;
    }

    return array;
  }

  function startInitialTurn() {
    makeTraitorPool();
    var factionView = getNextTurnOrder();
    factionView.startInitialTurn();
  }

  function makeTraitorPool() {
  /* Generate a pool of traitors that each player will choose from */
    var allLeaders = new Array();
    var factionViews = getFactionViews();
    for (var i = 0; i < factionViews.length; i++) {
      var factionView = factionViews[i];
      var factionLeaders = factionView.getLeaders();
      allLeaders = allLeaders.concat(factionLeaders);
    }

    shuffleArray(allLeaders);
    traitorPool = allLeaders;
  }

  this.dealTraitorHand = function() { 
    var traitorHand = new Array();
    for (var i = 0; i < 4; i++) {
      var traitorCard = traitorPool.shift();
      traitorHand.push(traitorCard);
    }
    return traitorHand;
  }

  function getNextTurnOrder() {
    var factionViews = getFactionViews();
    var nextFactionView = factionViews[0];
    rotateFactionViews(factionViews);
    return nextFactionView;
  }

  function rotateFactionViews(factionViews) {
    var factionView = factionViews.shift();
    factionViews.push(factionView);
    setFactionViews(factionViews);
  }

}
