module.exports = GameController;

var DuneGame = require("Dune/Game");
var MapView = require("./View/Map");
var StartMenuView = require("./View/StartMenu");
var FactionSelectView = require("./View/FactionSelect");

function GameController() {

  var factions = [];
  
  var turn = 0;
  var traitorPool = new Array();
  var that = this;

  this.game = new DuneGame();
  this.canvasContainer = new CanvasContainer();

  this.views = {
    "map": new MapView(this),
    "start": new StartMenuView(this),
    "select":new FactionSelectView(this),
    "factions": {}
  };


  this.startGame = function() {
    this.views.select.hide();
    initFactionViews();

    that.game.start();
    
    drawPlayerSeats();
    initMapView();
  }

  function initFactionViews() {
    for (var i = 0; i < factions.length; i++) {
      var factionName = factions[i];
      var FactionView = getFactionViewConstructor(factionName);
      that.views.factions[factionName] = new FactionView(that);
    }
  }

  function getFactionViewConstructor(factionName) {
    switch(factionName) {
      case "Atreides":
      	return require("./View/Faction/Atreides");
      case "Harkonnen":
      	return require("./View/Faction/Harkonnen");
      case "BeneGesserit":
      	return require("./View/Faction/BeneGesserit");
      case "Fremen":
      	return require("./View/Faction/Fremen");
      case "Guild":
      	return require("./View/Faction/Guild");
      case "Emperor":
      	return require("./View/Faction/Emperor");
      default:
      	throw new Error("Invalid faction view: "+factionName);
    }
  }


  this.debugSetFactions = function (factionsArray) {
  /* This is a debug function and should go away once gameplay finalized */
    factions = factionsArray;
  }

  function drawPlayerSeats() {
    for (var key in that.views.factions) {
      var factionView = that.views.factions[key];
      factionView.drawPlayerSeat();
    }
  }

  function initMapView() {
    that.views.map.show();
    that.views.map.loadImages();
  }

  this.startPlayerTurn = function() {
    var turnOrder = this.game.getTurnOrder();
    var faction = turnOrder[0];

    var factionView = this.views.factions[faction.constructor.name];

    //factionView.promptUserStartTurn();
  }  

}

function CanvasContainer() {

  var container = document.getElementById("gamecontainer");

  var layerMap = { };
  var layerOrder = [];
  
  this.layer = function(layerName, width, height) {
    if (! layerMap[layerName]) 
      newLayer(layerName, width, height);

    return layerMap[layerName]
  }

  function newLayer(layerName, width, height) {
    var canvas = document.createElement("canvas");
    canvas.id = layerName;
    canvas.className = "gamelayer";
    canvas.style.display = "block";

    var zIndex = 99 + layerOrder.length;
    canvas.style.zIndex = zIndex;

    canvas.width = width ? width : 768;
    canvas.height = height ? heigth : 1024;

    layerMap[layerName] = canvas;
    layerOrder.unshift(canvas);
    container.appendChild(canvas);
  }
}
