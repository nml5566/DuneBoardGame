module.exports = GameController;

var DuneGame = require("Dune/Game");
var MapView = require("./View/Map");
var StartMenuView = require("./View/StartMenu");
var FactionSelectView = require("./View/FactionSelect");

function GameController() {

  var turn = 0;
  var traitorPool = new Array();

  this.game = new DuneGame();
  this.canvasContainer = new CanvasContainer();
  this.loader = new Loader();

  this.players = { };
  this.views = {
    "map": new MapView(this),
    "start": new StartMenuView(this),
    "select":new FactionSelectView(this),
    "factions": {}
  };

  var that = this;

  this.startGame = function() {
    this.views.select.hide();
    initFactionViews();

    that.game.start();
    
    drawPlayerSeats();
    initMapView();
  }

  function initFactionViews() {
    for (var factionName in that.players) {
      var FactionView = getFactionViewConstructor(factionName);
      that.views.factions[factionName] = new FactionView(that);
    }
  }

  function getFactionViewConstructor(factionName) {
    switch(factionName) {
      case "Atreides":
      	return require("./View/Faction/Atreides");
      case "Harkonnen":
      	return require("./View/Faction/Harkonnen");
      case "BeneGesserit":
      	return require("./View/Faction/BeneGesserit");
      case "Fremen":
      	return require("./View/Faction/Fremen");
      case "Guild":
      	return require("./View/Faction/Guild");
      case "Emperor":
      	return require("./View/Faction/Emperor");
      default:
      	throw new Error("Invalid faction view: "+factionName);
    }
  }


  this.setFactions = function (factionsArray) {
    for (var i = 0; i < factionsArray.length; i++) {
      var factionName = factionsArray[i];
      var player = this.game.selectPlayer(factionName);
      this.players[factionName] = player;
    }
  }

  function drawPlayerSeats() {
    for (var key in that.views.factions) {
      var factionView = that.views.factions[key];
      factionView.drawPlayerSeat();
    }
  }

  function initMapView() {
    that.views.map.show();
    that.views.map.loadImages();
  }

  this.startPlayerTurn = function() {
    var turnOrder = this.game.getTurnOrder();
    var faction = turnOrder[0];

    var factionView = this.views.factions[faction.constructor.name];

    // TODO design the animation for this
    //factionView.promptUserStartTurn();
  }  

}

function CanvasContainer() {

  var container = document.getElementById("gamecontainer");

  var layerMap = { };
  var layerOrder = [];
  
  this.layer = function(layerName) {
    if (! layerMap[layerName]) 
      newLayer(layerName);

    return layerMap[layerName]
  }

  function newLayer(layerName) {
    var canvas = document.createElement("canvas");

    setCanvasAttributes(canvas, layerName);
  
    layerMap[layerName] = canvas;
    layerOrder.unshift(canvas);
    container.appendChild(canvas);
  }

  function setCanvasAttributes(canvas, layerName) {
    var zIndex = 99 + layerOrder.length;

    canvas.id = layerName;
    canvas.className = "gamelayer";
    canvas.style.display = "block";
    canvas.style.zIndex = zIndex;
    canvas.width = 768;
    canvas.height = 1024;

  }
}

function Loader() {

    var isLoaded = true,
        assetsLoaded = 0, 
        assetsToLoad = 0, 
        loadingScreen = document.getElementById('loadingscreen'),
	loadingMessage = document.getElementById('loadingmessage');

    var that = this;
    
    this.loadImage = function(url) {
        assetsToLoad++;
        this.isLoaded = false;

	var loadingScreen = document.getElementById('loadingscreen');
	loadingScreen.style.display = "block";

        var image = new Image();
        image.src = url;
        image.onload = this.itemLoaded;
        return image;
    };

    this.itemLoaded = function () {
        assetsLoaded++;

        loadingMessage.innerHTML = 
	  'isLoaded '+assetsLoaded+' of '+assetsToLoad;

        if (assetsLoaded == assetsToLoad){
            this.isLoaded = true;

            hideLoadingScreen();

            //and call the object onload method if it exists
            if(that.onload){
                that.onload();
                that.onload = undefined;
            }
        }
    }

    function hideLoadingScreen() {
      loadingScreen.style.display = "none";
    }
}

