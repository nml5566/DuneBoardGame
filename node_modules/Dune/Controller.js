var Loader = require("./Loader");
var canvasContainer = require("./CanvasContainer");

var gameView = require("./View/Game");
var StartMenuView = require("./View/StartMenu");
var FactionSelectView = require("./View/FactionSelect");
var mapView = require("./View/Map");

module.exports = new GameController();

function GameController() {

  var factionViews = {};

  this.startGame = function() 
  {
    gameView.game.start();

    hideFactionSelectView();
    initViews();
    this.startInitialPlayerTurn();
  }

  function hideFactionSelectView()
  {
    var factionSelectView = new FactionSelectView();
    factionSelectView.hide();
  }

  function initViews() 
  {
    initFactionViews();
    initMapView();
  }

  function initFactionViews() 
  {
    for (var factionName in gameView.players) {
      var FactionView = getFactionViewConstructor(factionName);
      var factionView = new FactionView();
      factionView.loadImages();
      factionViews[factionName] = factionView;
    }
  }

  function initMapView() {
    mapView.show();
    mapView.loadImages();
  }

  function getFactionViewConstructor(factionName) {
    switch(factionName) {
      case "Atreides":
      	return require("./View/Faction/Atreides");
      case "Harkonnen":
      	return require("./View/Faction/Harkonnen");
      case "BeneGesserit":
      	return require("./View/Faction/BeneGesserit");
      case "Fremen":
      	return require("./View/Faction/Fremen");
      case "Guild":
      	return require("./View/Faction/Guild");
      case "Emperor":
      	return require("./View/Faction/Emperor");
      default:
      	throw new Error("Invalid faction view: "+factionName);
    }
  }


  this.setFactions = function (factionsArray) {
    for (var i = 0; i < factionsArray.length; i++) {
      var factionName = factionsArray[i];
      var player = gameView.game.selectPlayer(factionName);
      //this.players[factionName] = player;
      gameView.players[factionName] = player;
    }
  }


  this.startInitialPlayerTurn = function() {
    var turnOrder = gameView.game.getTurnOrder();
    var faction = turnOrder[0];

    var factionView = factionViews[faction.constructor.name];

    factionView.startInitialTurn();
  }  

}



Image.prototype.moveToCoord = function(point) {
  var image = this;

  if (!image.canvas) {
    throw new Error("Image has no canvas property");
    return;
  }


  var finalX = point[0],
      finalY = point[1];

  image.xStep = (finalX - image.xPos) * image.speed;
  image.yStep = (finalY - image.yPos) * image.speed;

  image.movement = setInterval(function () {
    image.animateMovement([finalX, finalY]);
  }, 10);

}

Image.prototype.animateMovement = function(point) {
  var image = this;

  var canvas = image.canvas;
  var context = canvas.getContext("2d");

  var x = point[0];
  var y = point[1];

  image.xPos += image.xStep;
  image.yPos += image.yStep;

  canvas.redraw();
  context.drawImage(image, 
    image.xPos, image.yPos,
    image.width, image.height
  );


  if (
    image.yStep > 0 && image.yPos + image.yStep >= y ||
    image.yStep < 0 && image.yPos + image.yStep <= y || 
    image.xStep > 0 && image.xPos + image.xStep >= x ||
    image.xStep < 0 && image.xPos + image.xStep <= x
  )
  {
    clearInterval(image.movement);
    delete image.movement;
    delete image.xStep;
    delete image.yStep;

    image.xPos = x
    image.yPos = y

    canvas.redraw();
    context.drawImage(image, 
      image.xPos, image.yPos,
      image.width, image.height
    );

    if (this.onHalt) {
      var onHalt = this.onHalt;
      delete this.onHalt;
      onHalt();
    }

  }
}

