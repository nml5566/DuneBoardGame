module.exports = new CanvasContainer;

function CanvasContainer() 
{

  var container = document.getElementById("gamecontainer");

  var layerMap = { };
  var layerOrder = [];
  var zIndexMin = 99;
  
  this.layer = function(layerName) {
    if (! layerMap[layerName]) 
      newLayer(layerName);

    return layerMap[layerName]
  }

  function newLayer(layerName) {
    var canvas = document.createElement("canvas");

  
    layerMap[layerName] = canvas;

    /* Start layers at bottom to prevent newLayer() race conditions*/
    /* Code should manually call moveLayerToTop() */
    layerOrder.push(canvas);

    setCanvasAttributes(canvas, layerName);

    container.appendChild(canvas);
  }

  function setCanvasAttributes(canvas, layerName) {
    //var zIndex = zIndexMin - layerOrder.length;
    var zIndex = zIndexLookup(layerName);

    canvas.id = layerName;
    canvas.className = "gamelayer";
    canvas.style.display = "block";
    canvas.style.zIndex = zIndex;
    canvas.width = 768;
    canvas.height = 1024;

  }

  function zIndexLookup(layerName) 
  {
    switch (layerName) {
      case "notification":
      	return 200;
  /*    case "territoryscreen":*/
      	/*return 99;*/
      case "playerscreen":
      	return 99;
      case "troopscreen":
      	return 98;
      case "playerseat":
      	return 97;
      case "storm":
      	return 96;
      default:
      	throw new Error("No zIndex case defined for " + layerName);
    }
  }

/*  this.moveLayerToTop = function(canvas) {*/
    //var newIndex = 0;
    //var oldIndex = getLayerIndex(canvas);

    //layerOrder.splice(newIndex, 0, layerOrder.splice(oldIndex, 1)[0]);
    //canvas.style.zIndex = zIndexMin + layerOrder.length;

  /*}*/

  function getLayerIndex(canvas) {
    for (var i = 0; i < layerOrder.length; i++) {
      var layer = layerOrder[i];
      if (layer.id == canvas.id) {
      	return i;
      }
    }

    throw new Error("Canvas element " + canvas.id + " not in layers");
  }

  this.getTopLayer = function() 
  {
    return layerOrder[0];
  }

  this.deleteLayer = function(canvas) 
  {
    var canvasIndex = getLayerIndex(canvas);
    layerOrder.splice(canvasIndex, 1);
    delete layerMap[canvas.id];

    container.removeChild(canvas);
  }
}

