module.exports = PlayerScreen;

function PlayerScreen(controller, images) 
{

  var canvasContainer = controller.canvasContainer,
      canvas = canvasContainer.layer('playerscreen'),
      context = canvas.getContext("2d"),
      loader = new controller.Loader();

  var deckImgPath = "/img/deck/";

  var spiceIconImg,
      troopIconImg,
      treacheryDeckImg,
      traitorDeckImg,
      bonusDeckImg,
      allianceDeckImg;

  var iconScaleWidth = 67.5;
  var iconScaleHeight = 67.5;

  var deckScaleWidth = 100;
  var deckScaleHeight = 145;

  var padding = 10;

  var transparent = 0.5;
  var solid = 1;

  this.draw = function() 
  {
    canvas.height = 172;
    canvasContainer.moveLayerToTop(canvas);

    troopIconImg = images.troop;
    troopIconImg.xPos = padding;
    troopIconImg.yPos = padding;

    var spiceIconImgUrl = "/img/icons/" + "spice-alt.png";
    spiceIconImg = loader.loadImage(spiceIconImgUrl);
    spiceIconImg.xPos = padding;
    spiceIconImg.yPos = troopIconImg.yPos + iconScaleHeight + padding;

    loadPlayerHandImages();

    context.fillStyle = "grey";
    context.fillRect(0, 0, canvas.width, canvas.height);

    canvas.redraw = drawPlayerScreen;

    loader.onload = function() { canvas.redraw() }
  }

  function drawPlayerScreen()
  {
    context.clearRect(0, 0, canvas.width, canvas.height);

    context.fillStyle = "grey";
    context.fillRect(0, 0, canvas.width, canvas.height);

    context.drawImage(troopIconImg, 
	troopIconImg.xPos, troopIconImg.yPos, 
	iconScaleWidth, iconScaleHeight);

    context.drawImage(spiceIconImg, 
	spiceIconImg.xPos, spiceIconImg.yPos, 
	iconScaleWidth, iconScaleHeight);

    context.globalAlpha = transparent;

    drawPlayerHandImage(treacheryDeckImg);
    drawPlayerHandImage(traitorDeckImg);
    drawPlayerHandImage(bonusDeckImg);
    drawPlayerHandImage(allianceDeckImg);

    context.globalAlpha = 1;


    var leaderDiscs = images.leaders;
    drawLeaderDiscs(leaderDiscs);
  }

  function drawPlayerHandImage(image) 
  {
    if (image.isActive)
      context.globalAlpha = solid;

    context.drawImage(image, 
      image.xPos, image.yPos, 
      deckScaleWidth, deckScaleHeight);

    context.globalAlpha = transparent;
  }

  function drawTraitorHand()
  {
  }

  function loadPlayerHandImages()
  {
    loadTreacheryHand();
    loadTraitorHand();
    loadBonusHand();
    loadAllianceHand();
  }

  function loadTreacheryHand() 
  {
    var treacheryDeckImgUrl = deckImgPath + "treachery.png";
    treacheryDeckImg = loader.loadImage(treacheryDeckImgUrl);
    treacheryDeckImg.xPos = spiceIconImg.xPos + iconScaleWidth + padding;
    treacheryDeckImg.yPos = 10;
  }

  function loadTraitorHand()
  {
    var traitorDeckImgUrl = deckImgPath + "traitor.png";
    traitorDeckImg = loader.loadImage(traitorDeckImgUrl);
    traitorDeckImg.xPos = treacheryDeckImg.xPos + deckScaleWidth + padding;
    traitorDeckImg.yPos = padding;
  }

  function loadBonusHand()
  {
    var bonusDeckImgUrl = deckImgPath + "bonus.png";
    bonusDeckImg = loader.loadImage(bonusDeckImgUrl);
    bonusDeckImg.xPos = traitorDeckImg.xPos + deckScaleWidth + padding;
    bonusDeckImg.yPos = padding;
  }

  function loadAllianceHand()
  {
    var allianceDeckImgUrl = deckImgPath + "alliance.png";
    allianceDeckImg = loader.loadImage(allianceDeckImgUrl);
    allianceDeckImg.xPos = bonusDeckImg.xPos + deckScaleWidth + padding;
    allianceDeckImg.yPos = padding
  }

  function drawLeaderDiscs(leaderDiscs) 
  {
    var discScaleWidth = 50;
    var discScaleHeight = 50;

    var leaderCircle = {
      "centerX": 600,
      "centerY": canvas.height/2,
      "radius": 75,
      "angle": 0
    };

    var TO_RADIANS = Math.PI/180;
    var numberOfDiscs = 5;
    var angle = 180/numberOfDiscs * TO_RADIANS;

    /* Calculate largest radius for 5 smaller circles that can fit in larger 
    * circle using steiner chain formula */
    var leaderDiscRadius = 
      leaderCircle.radius / ( (1 - Math.sin(angle)) / Math.sin(angle) + 2 );

    for (var i = 0; i < 5; i++) {

      var degrees = 360 / numberOfDiscs;
      /* Angle arranges discs in star formation */
      leaderCircle.angle = (i * degrees * TO_RADIANS) - angle/2;

      var x = leaderCircle.centerX + Math.cos(leaderCircle.angle) 
	* (2 * leaderCircle.radius / 3);
      var y = leaderCircle.centerY + Math.sin(leaderCircle.angle) 
	* (2 * leaderCircle.radius / 3);
      
      var leaderDiscImg = leaderDiscs[i];
      leaderDiscImg.xPos = x - leaderDiscRadius;
      leaderDiscImg.yPos = y - leaderDiscRadius;

      discScaleWidth = discScaleHeight = 2 * leaderDiscRadius;
      context.drawImage(leaderDiscImg, 
	leaderDiscImg.xPos, leaderDiscImg.yPos, 
	discScaleWidth, discScaleHeight);

    }
  }

  this.addTraitorCard = function(traitorCardImg) 
  {
    addCardToHand(traitorCardImg, traitorDeckImg);
  }

  this.addTreacheryCard = function() 
  {
    var treacheryImgUrl = "/img/treachery/chrysknife.png";
    var treacheryImg = loader.loadImage(treacheryImgUrl);

    loader.onload = function() 
    {
      addCardToHand(treacheryImg, treacheryDeckImg);
    }
  }

  function addCardToHand(cardImg, playerHandImg)
  {
    cardImg.canvas = canvas;
    cardImg.xPos = canvas.width;
    cardImg.yPos = playerHandImg.yPos;
    cardImg.speed = 0.02;
    cardImg.width = deckScaleWidth;
    cardImg.height = deckScaleHeight;

    cardImg.moveToCoord([playerHandImg.xPos, playerHandImg.yPos]);
    cardImg.onHalt = function() 
    {
      updateHand(playerHandImg);
    }
  }

  function updateHand(playerHandImg)
  {
    console.log('updating hand');
    playerHandImg.isActive = true;

    canvas.redraw();

    var handCount = "1";
    var fontSize = 25;
    context.font = fontSize + "pt Arial";

    var textWidth = context.measureText(handCount).width;
    var textPadding = 1.3

    var xPos = playerHandImg.xPos + deckScaleWidth - textWidth * textPadding;
    var yPos = playerHandImg.yPos + fontSize * textPadding;

    context.fillStyle = "white";
    context.fillText(handCount, xPos, yPos);

  }
}

