module.exports = PlayerScreen;

var controller = require("Dune/Controller");

var canvasContainer = require("Dune/CanvasContainer");
var Loader = require("Dune/Loader");
var eventChain = require("Dune/EventChain");

var territoryView = require("Dune/View/Territory");

function PlayerScreen(images) 
{

  var canvas = canvasContainer.layer("playerscreen"),
      context = canvas.getContext("2d"),
      loader = new Loader();

  canvas.height = 172;

  var deckImgPath = "/img/deck/";

  var spiceIconImg,
      troopIconImg,
      treacheryDeckImg,
      traitorDeckImg,
      bonusDeckImg,
      allianceDeckImg;

  var troopReserveCount = 20;

  var traitorHand = [],
      treacheryHand = [],
      bonusHand = [],
      allianceHand = [];

  var iconScaleWidth = 67.5;
  var iconScaleHeight = 67.5;

  var deckScaleWidth = 100;
  var deckScaleHeight = 145;

  var padding = 10;

  var transparent = 0.5;
  var solid = 1;

  var that = this;

  this.draw = function() 
  {
    //canvasContainer.moveLayerToTop(canvas);

    troopIconImg = images.troop;
    troopIconImg.xPos = padding;
    troopIconImg.yPos = padding;

    var spiceIconImgUrl = "/img/icons/" + "spice-alt.png";
    spiceIconImg = loader.loadImage(spiceIconImgUrl);
    spiceIconImg.xPos = padding;
    spiceIconImg.yPos = troopIconImg.yPos + iconScaleHeight + padding;

    loadPlayerHandImages();

    context.fillStyle = "grey";
    context.fillRect(0, 0, canvas.width, canvas.height);

    canvas.redraw = drawPlayerScreen;

    loader.onload = function() { canvas.redraw() }
  }

  this.update = function() {
    //TODO merge with this.draw
    canvas.redraw();
  }

  function drawPlayerScreen()
  {
    context.clearRect(0, 0, canvas.width, canvas.height);

    context.fillStyle = "grey";
    context.fillRect(0, 0, canvas.width, canvas.height);

    drawOffPlanetTroopReserves();

    context.drawImage(spiceIconImg, 
	spiceIconImg.xPos, spiceIconImg.yPos, 
	iconScaleWidth, iconScaleHeight);

    context.globalAlpha = transparent;

    drawPlayerHandImage(treacheryDeckImg, treacheryHand);
    drawPlayerHandImage(traitorDeckImg, traitorHand);
    drawPlayerHandImage(bonusDeckImg, bonusHand);
    drawPlayerHandImage(allianceDeckImg, allianceHand);

    context.globalAlpha = solid;


    var leaderDiscs = images.leaders;
    drawLeaderDiscs(leaderDiscs);
  }

  function drawOffPlanetTroopReserves() {

    context.drawImage(troopIconImg, 
      troopIconImg.xPos, troopIconImg.yPos, 
      iconScaleWidth, iconScaleHeight);

    drawTroopReserveCount();
  }

  function drawTroopReserveCount() {
    var fontSize = 12;
    context.font = fontSize + "pt Arial";
    
    var textWidth = context.measureText(troopReserveCount).width;

    // dead center
    //var xPos = troopIconImg.xPos + iconScaleWidth/2 - textWidth/2;
    //var yPos = troopIconImg.yPos + iconScaleHeight/2 + fontSize/2; 

    // left-middle
    //var xPos = troopIconImg.xPos; 
    //var yPos = troopIconImg.yPos + iconScaleHeight/2 + fontSize/2; 
   
    // bottom-middle position
    var xPos = troopIconImg.xPos + iconScaleWidth/2 - textWidth/2;
    var yPos = troopIconImg.yPos + iconScaleHeight - fontSize/2;

    context.strokeStyle = "black";
    context.lineWidth = 8;
    context.strokeText(troopReserveCount, xPos, yPos);

    context.fillStyle = "white";
    context.fillText(troopReserveCount, xPos, yPos);
  }

  function drawPlayerHandImage(image, playerHand) 
  {

    if (playerHand.length) {
      context.globalAlpha = solid;
    } else {
      context.globalAlpha = transparent;
    }

    context.drawImage(image, 
      image.xPos, image.yPos, 
      deckScaleWidth, deckScaleHeight);

    if (playerHand.length)
      drawHandCount(image, playerHand);


  }

  function loadPlayerHandImages()
  {
    loadTreacheryHand();
    loadTraitorHand();
    loadBonusHand();
    loadAllianceHand();
  }

  function loadTreacheryHand() 
  {
    var treacheryDeckImgUrl = deckImgPath + "treachery.png";
    treacheryDeckImg = loader.loadImage(treacheryDeckImgUrl);
    treacheryDeckImg.xPos = spiceIconImg.xPos + iconScaleWidth + padding;
    treacheryDeckImg.yPos = 10;
  }

  function loadTraitorHand()
  {
    var traitorDeckImgUrl = deckImgPath + "traitor.png";
    traitorDeckImg = loader.loadImage(traitorDeckImgUrl);
    traitorDeckImg.xPos = treacheryDeckImg.xPos + deckScaleWidth + padding;
    traitorDeckImg.yPos = padding;
  }

  function loadBonusHand()
  {
    var bonusDeckImgUrl = deckImgPath + "bonus.png";
    bonusDeckImg = loader.loadImage(bonusDeckImgUrl);
    bonusDeckImg.xPos = traitorDeckImg.xPos + deckScaleWidth + padding;
    bonusDeckImg.yPos = padding;
  }

  function loadAllianceHand()
  {
    var allianceDeckImgUrl = deckImgPath + "alliance.png";
    allianceDeckImg = loader.loadImage(allianceDeckImgUrl);
    allianceDeckImg.xPos = bonusDeckImg.xPos + deckScaleWidth + padding;
    allianceDeckImg.yPos = padding
  }

  function drawLeaderDiscs(leaderDiscs) 
  {
    var discScaleWidth = 50;
    var discScaleHeight = 50;

    var leaderCircle = {
      "centerX": 600,
      "centerY": canvas.height/2,
      "radius": 75,
      "angle": 0
    };

    var TO_RADIANS = Math.PI/180;
    var numberOfDiscs = 5;
    var angle = 180/numberOfDiscs * TO_RADIANS;

    /* Calculate largest radius for 5 smaller circles that can fit in larger 
    * circle using steiner chain formula */
    var leaderDiscRadius = 
      leaderCircle.radius / ( (1 - Math.sin(angle)) / Math.sin(angle) + 2 );

    for (var i = 0; i < 5; i++) {

      var degrees = 360 / numberOfDiscs;
      /* Angle arranges discs in star formation */
      leaderCircle.angle = (i * degrees * TO_RADIANS) - angle/2;

      var x = leaderCircle.centerX + Math.cos(leaderCircle.angle) 
	* (2 * leaderCircle.radius / 3);
      var y = leaderCircle.centerY + Math.sin(leaderCircle.angle) 
	* (2 * leaderCircle.radius / 3);
      
      var leaderDiscImg = leaderDiscs[i];
      leaderDiscImg.xPos = x - leaderDiscRadius;
      leaderDiscImg.yPos = y - leaderDiscRadius;

      discScaleWidth = discScaleHeight = 2 * leaderDiscRadius;
      context.drawImage(leaderDiscImg, 
	leaderDiscImg.xPos, leaderDiscImg.yPos, 
	discScaleWidth, discScaleHeight);

    }
  }

  function drawLeaderDiskStarFormation() 
  {
  }

  this.addTraitorCard = function(traitorCardImg) 
  {
    addCardToHand(traitorCardImg, traitorDeckImg);
    traitorCardImg.onHalt = function() { 
      traitorHand.push(traitorCardImg);
      canvas.redraw() 

      eventChain.next();
    }
  }

  this.addTreacheryCard = function(treacheryCardImg) 
  {
    addCardToHand(treacheryCardImg, treacheryDeckImg);
    treacheryCardImg.onHalt = function() { 
      treacheryHand.push(treacheryCardImg);
      canvas.redraw() 

      eventChain.next();
    }
  }

  function addCardToHand(cardImg, playerHandImg)
  {
    cardImg.canvas = canvas;
    cardImg.xPos = canvas.width;
    cardImg.yPos = playerHandImg.yPos;
    cardImg.speed = 0.02;
    cardImg.width = deckScaleWidth;
    cardImg.height = deckScaleHeight;

    cardImg.moveToCoord([playerHandImg.xPos, playerHandImg.yPos]);
  }

  function drawHandCount(playerHandImg, playerHand)
  {

    var handCount = playerHand.length;
    var fontSize = 25;
    context.font = fontSize + "pt Arial";

    var textWidth = context.measureText(handCount).width;
    var textPadding = 1.3

    var xPos = playerHandImg.xPos + deckScaleWidth - textWidth * textPadding;
    var yPos = playerHandImg.yPos + fontSize * textPadding;

    context.fillStyle = "white";
    context.fillText(handCount, xPos, yPos);

    if (that.onHandUpdate) {
      that.onHandUpdate();
      delete that.onHandUpdate;
    }

  }

  this.shipTroops = function(territoryName) 
  {
    var territoryObj = territoryView.getTerritory(territoryName);

    var troopTokenImg = getTroopTokenImg(territoryObj);

    troopReserveCount--;
    this.update();
    var troopObj = territoryObj.addFaction('atreides', troopTokenImg);

    var troopScale = troopObj.scale;
    troopTokenImg.width = troopScale;
    troopTokenImg.height = troopScale;

    var troopCoords = troopObj.coords;
    troopTokenImg.moveToCoord([troopCoords.x, troopCoords.y]);

    eventChain.add(function() { 
      var notificationCanvas = canvasContainer.layer("notification");
      canvasContainer.deleteLayer(notificationCanvas);
    });

    troopTokenImg.onHalt = eventChain.next;

  }

  function getTroopTokenImg(territoryObj) 
  {
    var notificationCanvas = canvasContainer.layer("notification");
    notificationCanvas.redraw = function() 
    {
      var context = this.getContext("2d");
      context.clearRect(0, 0, this.width, this.height);
      territoryObj.draw();
    }

    var troopTokenImg = new Image();

    troopTokenImg.src = troopIconImg.src;
    troopTokenImg.yPos = troopIconImg.yPos + notificationCanvas.height - canvas.height;
    troopTokenImg.xPos = troopIconImg.xPos;
    troopTokenImg.height = iconScaleHeight;
    troopTokenImg.width = iconScaleWidth;
    troopTokenImg.canvas = notificationCanvas;
    troopTokenImg.speed = 0.1;

    return troopTokenImg;
  }
}

