var Loader = require("Dune/Loader");
var canvasContainer = require("Dune/CanvasContainer");
var shuffleArray = require("Dune/shuffle");
var eventChain = require("Dune/EventChain");

module.exports = BaseTerritoryView;

function BaseTerritoryView(territoryName) 
{
  var loader = new Loader();

  var occupyingFactions = {};

  var troopIconSize = 8.5;

  var totalSpiceCount = 0;

  var coords = getMapOverviewTerritoryCoordinates();

  function getMapOverviewTerritoryCoordinates() 
  {
    var areaTags = document.getElementsByTagName("area");

    for (var i = 0; i < areaTags.length; i++) {
      var areaTag = areaTags[i];

      if (areaTag.target == territoryName) {
	var coords = 
	  areaTag.coords.split(",").map(function(c) { return parseInt(c, 10) });
	return coords;
      }
    }

    throw new Error("No area tag for " + territoryName);
  }

  this.addFaction = function(troopTokenImg) 
  {
    var faction = troopTokenImg.faction.constructor.name;

    if (occupyingFactions[faction]) {
      occupyingFactions[faction].troops.unshift(troopTokenImg);
    } else {
      occupyingFactions[faction] = {
	"troops": [troopTokenImg]
      };
    }

    var rectangle = getTerritoryMinimumBoundingRectangle(coords);

    troopTokenImg.moveToCoord([
      rectangle.x + rectangle.width/2 - troopTokenImg.width/2, 
      rectangle.y + rectangle.height/2 - troopTokenImg.height/2
    ]);

    troopTokenImg.onHalt = eventChain.next;
  }

  this.draw = function() { highlightTerritoryWithFactionColors() }

  function highlightTerritoryWithFactionColors() 
  {
    var canvas = canvasContainer.layer("troopscreen");
    var ctx = canvas.getContext("2d");

    var testCanvas = document.createElement("canvas");
    testCanvas.width = canvas.width;
    testCanvas.height = canvas.height;
    var testCtx = testCanvas.getContext("2d");

    testCtx.globalCompositeOperation = "destination-atop";
    var rectangle = getTerritoryMinimumBoundingRectangle(coords);

    var factionNames = [];
    for (var factionName in occupyingFactions) {
      factionNames.push(factionName);
    }
    var factionsCount = factionNames.length

    for (var i = 0; i < factionNames.length - 1; i++)
    {
      var factionName = factionNames[i];
      testCtx.fillStyle = getFactionColor(factionName);
      testCtx.fillStyle = black;
      testCtx.lineWidth = 4;
      testCtx.strokeStyle = "black";
      testCtx.strokeRect(rectangle.x, rectangle.y, 
	rectangle.width * i / factionsCount, rectangle.height
      );
      testCtx.fillRect(rectangle.x, rectangle.y, 
	rectangle.width * i / factionsCount, rectangle.height
      );
    }

    testCtx.beginPath();
    testCtx.moveTo(coords[0], coords[1]);
    for( item=2 ; item < coords.length-1 ; item+=2 ) {
      testCtx.lineTo( coords[item] , coords[item+1] )
    }
    testCtx.closePath();
    testCtx.fillStyle = getFactionColor(factionNames.shift());
    testCtx.fill();


    ctx.fillStyle = "black";
    drawTerritoryPath(coords,ctx);
    ctx.fill();
    
    ctx.globalCompositeOperation = "xor";
    drawTerritoryPath(coords,ctx);
    ctx.fill();
    ctx.globalCompositeOperation = "source-over";

    ctx.drawImage(testCanvas, 0, 0);

  }

  this.animateSpiceBlow = function(card) 
  {
    var spiceBlowCoords = getSpiceBlowCoordinates();
    var spiceBlowText = spiceBlowCoords.text;

    var canvas = canvasContainer.layer("notification");
    var ctx = canvas.getContext("2d");

    var count = 0;
    var timeout = 53 * 12 / card.spice;
    var interval = setInterval(function() {

      /* Territory highlight  */
      drawTerritoryPath(coords,ctx);
      
      var creamColor = "rgb(255,244,199)";
      ctx.lineWidth = 20;
      ctx.strokeStyle = creamColor;
      ctx.stroke();

      ctx.lineWidth = 10;
      ctx.strokeStyle = "black";
      ctx.stroke();

      //ctx.fillStyle = "rgb(126,2,0)";
      ctx.fillStyle = getSpiceBlowHighlightColor(card.spice);
      ctx.fill();

      /* Spice Icon */
      var radius = 10;
      ctx.beginPath();
      ctx.arc(spiceBlowCoords.x, spiceBlowCoords.y, radius, 0, 2*Math.PI);
      ctx.fillStyle = creamColor;
      ctx.fill();

      /* Text */
      drawSpiceCount(spiceBlowText, ctx);
  
      totalSpiceCount++;
      count++;

      if (count == card.spice) {
	clearInterval(interval);
	canvasContainer.deleteLayer(canvas);

	var spiceCanvas = canvasContainer.layer("spicescreen");
	var spiceCtx = spiceCanvas.getContext("2d");

	drawSpiceCount(spiceBlowText, spiceCtx);
 
	eventChain.next();
      }

    }, timeout);

  }

  function drawSpiceCount(spiceBlowText, ctx) 
  {
    ctx.font = "12pt Arial";

    ctx.lineWidth = 2;
    ctx.strokeStyle = "rgb(255,244,199)";

    ctx.strokeText(totalSpiceCount, spiceBlowText.x, spiceBlowText.y);

    ctx.fillStyle = "black";
    ctx.fillText(totalSpiceCount, spiceBlowText.x, spiceBlowText.y);
  }

  function getSpiceBlowCoordinates()
  {
    switch(territoryName) 
    {
      case "cielagoSouth": return {"x": 397, "y": 735, "text": {x: 407, y: 740}};
      case "cielagoNorth": return {"x": 422, "y": 536, "text": {x: 436, y: 544}};
      case "windPassNorth": return {"x": 318, "y": 466, "text": {x: 330, y: 475}};
      case "theMinorErg": return {"x": 493, "y": 372, "text": {x: 507, y: 377}};
      case "haggaBasin": return {"x": 296, "y": 321, "text": {x: 310, y: 326}};
      case "brokenLand": return {"x": 268, "y": 139, "text": {x: 283 , y: 142 }};
      case "oldGap": return {"x": 456, "y": 121, "text": {x:  470, y: 128  }};
      case "sihayaRidge": return {"x": 603, "y": 199, "text": {x:  614, y: 211  }};
      case "redChasm": return {"x": 694, "y": 399, "text": {x:  671, y: 404  }};
      case "southMesa": return {"x": 669, "y": 548, "text": {x:  655, y: 575 }};
      case "rockOutcroppings": return {"x": 131, "y": 242, "text": {x:  143, y: 245  }};
      case "funeralPlain": return {"x": 82, "y": 364, "text": {x:  97, y: 370  }};
      case "theGreatFlat": return {"x": 77, "y": 402, "text": {x:  88, y: 407  }};
      case "habbanyaErg": return {"x": 85, "y": 502, "text": {x:  98, y: 508  }};
      case "habbanyaRidgeFlat": return {"x": 182, "y": 658, "text": {x:  193, y: 663  }};
      default: throw new Error("No coordinates defined for " + territoryName);
    }
  }

  function getSpiceBlowHighlightColor(spiceBlowCount) 
  {
    switch (spiceBlowCount)
    {
      case 12: return "rgb(126,2,0)";
      case 10: return "rgb(150,51,0)";
      case 8: return "rgb(186,113,0)";
      case 6: return "rgb(214,163,0)";
      default: throw new Error('No highlight color for '+spiceBlowCount+' spice');
    }
  }

  function endSpiceBlowAnimation(interval) 
  {
    clearInterval(interval);
  }

  function getFactionColor(factionName)
  {
    var alpha = "0.8)";
    var red = "rgba(255,0,0," + alpha;
    var orange = "rgba(255,128,0," + alpha;
    var yellow = "rgba(255,255,0," + alpha;
    var green = "rgba(0,255,0," + alpha;
    var blue = "rgba(0,0,255," + alpha;
    //var black = "rgba(0,0,0," + alpha;
    var grey = "rgba(96,96,96," + alpha;

    switch(factionName.toLowerCase())
    {
      case "atreides": return green;
      case "harkonnen": return grey;
      case "guild": return orange;
      case "fremen": return yellow;
      case "benegesserit": return blue;
      case "emperor": return red;
      default: throw new Error("No faction color defined for "+factionName);
    }
  }

  function getTerritoryMinimumBoundingRectangle(coords) 
  {
    var smallestX = undefined,
	largestX = undefined, 
	smallestY = undefined,
	largestY = undefined; 

    for( i=2 ; i < coords.length-1 ; i+=2 )
    {
      var x= coords[i], y = coords[i+1];

      if (smallestX == undefined) { smallestX = x }
      else if (x < smallestX) { smallestX = x }

      if (smallestY == undefined) { smallestY = y }
      else if (y < smallestY) { smallestY = y }

      if (largestX == undefined) { largestX = x }
      else if (x > largestX) { largestX = x }

      if (largestY == undefined) { largestY = y }
      else if (y > largestY) { largestY = y }
    }

    var width = largestX - smallestX;
    var height = largestY - smallestY;

    var rectangle = {"x": smallestX, "y": smallestY, 
      "width": width, "height": height};

    return rectangle;
  }

  function drawTerritoryPath(coords,ctx) 
  {

    ctx.beginPath();
    ctx.moveTo(coords[0], coords[1]);
    for( item=2 ; item < coords.length-1 ; item+=2 ) {
      ctx.lineTo( coords[item] , coords[item+1] )
    }
    ctx.closePath();
  }

}
