var Loader = require("Dune/Loader");
var canvasContainer = require("Dune/CanvasContainer");
var shuffleArray = require("Dune/shuffle");
var eventChain = require("Dune/EventChain");

module.exports = BaseTerritoryView;

function BaseTerritoryView(territoryName) 
{
  var loader = new Loader();

  var occupyingFactions = {};

  var troopIconSize = 8.5;

  var coords = getMapOverviewTerritoryCoordinates();

  function getMapOverviewTerritoryCoordinates() 
  {
    var areaTags = document.getElementsByTagName("area");

    for (var i = 0; i < areaTags.length; i++) {
      var areaTag = areaTags[i];

      if (areaTag.target == territoryName) {
	var coords = 
	  areaTag.coords.split(",").map(function(c) { return parseInt(c, 10) });
	return coords;
      }
    }
  }

  this.addFaction = function(troopTokenImg) 
  {
    var faction = troopTokenImg.faction.constructor.name;

    if (occupyingFactions[faction]) {
      occupyingFactions[faction].troops.unshift(troopTokenImg);
    } else {
      occupyingFactions[faction] = {
	"troops": [troopTokenImg]
      };
    }

    var rectangle = getTerritoryMinimumBoundingRectangle(coords);

    troopTokenImg.moveToCoord([
      rectangle.x + rectangle.width/2 - troopTokenImg.width/2, 
      rectangle.y + rectangle.height/2 - troopTokenImg.height/2
    ]);

    troopTokenImg.onHalt = eventChain.next;
  }

  this.draw = function() { highlightTerritoryWithFactionColors() }

  function highlightTerritoryWithFactionColors() 
  {
    var canvas = canvasContainer.layer("troopscreen");
    var ctx = canvas.getContext("2d");

    var testCanvas = document.createElement("canvas");
    testCanvas.width = canvas.width;
    testCanvas.height = canvas.height;
    var testCtx = testCanvas.getContext("2d");

    testCtx.globalCompositeOperation = "destination-atop";
    var rectangle = getTerritoryMinimumBoundingRectangle(coords);

    var factionNames = [];
    for (var factionName in occupyingFactions) {
      factionNames.push(factionName);
    }
    var factionsCount = factionNames.length

    for (var i = 0; i < factionNames.length - 1; i++)
    {
      var factionName = factionNames[i];
      testCtx.fillStyle = getFactionColor(factionName);
      testCtx.fillStyle = black;
      testCtx.lineWidth = 4;
      testCtx.strokeStyle = "black";
      testCtx.strokeRect(rectangle.x, rectangle.y, 
	rectangle.width * i / factionsCount, rectangle.height
      );
      testCtx.fillRect(rectangle.x, rectangle.y, 
	rectangle.width * i / factionsCount, rectangle.height
      );
    }

    testCtx.beginPath();
    testCtx.moveTo(coords[0], coords[1]);
    for( item=2 ; item < coords.length-1 ; item+=2 ) {
      testCtx.lineTo( coords[item] , coords[item+1] )
    }
    testCtx.closePath();
    testCtx.fillStyle = getFactionColor(factionNames.shift());
    testCtx.fill();


    ctx.fillStyle = "black";
    drawTerritoryPath(coords,ctx);
    ctx.fill();
    
    ctx.globalCompositeOperation = "xor";
    drawTerritoryPath(coords,ctx);
    ctx.fill();
    ctx.globalCompositeOperation = "source-over";

    ctx.drawImage(testCanvas, 0, 0);

  }

  function getFactionColor(factionName)
  {
    var alpha = "0.8)";
    var red = "rgba(255,0,0," + alpha;
    var orange = "rgba(255,128,0," + alpha;
    var yellow = "rgba(255,255,0," + alpha;
    var green = "rgba(0,255,0," + alpha;
    var blue = "rgba(0,0,255," + alpha;
    //var black = "rgba(0,0,0," + alpha;
    var grey = "rgba(96,96,96," + alpha;

    switch(factionName.toLowerCase())
    {
      case "atreides": return green;
      case "harkonnen": return grey;
      case "guild": return orange;
      case "fremen": return yellow;
      case "benegesserit": return blue;
      case "emperor": return red;
      default: throw new Error("No faction color defined for "+factionName);
    }
  }

  function getTerritoryMinimumBoundingRectangle(coords) 
  {
    var smallestX = undefined,
	largestX = undefined, 
	smallestY = undefined,
	largestY = undefined; 

    for( i=2 ; i < coords.length-1 ; i+=2 )
    {
      var x= coords[i], y = coords[i+1];

      if (smallestX == undefined) { smallestX = x }
      else if (x < smallestX) { smallestX = x }

      if (smallestY == undefined) { smallestY = y }
      else if (y < smallestY) { smallestY = y }

      if (largestX == undefined) { largestX = x }
      else if (x > largestX) { largestX = x }

      if (largestY == undefined) { largestY = y }
      else if (y > largestY) { largestY = y }
    }

    var width = largestX - smallestX;
    var height = largestY - smallestY;

    var rectangle = {"x": smallestX, "y": smallestY, 
      "width": width, "height": height};

    return rectangle;
  }

  function drawTerritoryPath(coords,ctx) 
  {

    ctx.beginPath();
    ctx.moveTo(coords[0], coords[1]);
    for( item=2 ; item < coords.length-1 ; item+=2 ) {
      ctx.lineTo( coords[item] , coords[item+1] )
    }
    ctx.closePath();
  }

}
