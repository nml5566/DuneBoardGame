var Loader = require("Dune/Loader");
var canvasContainer = require("Dune/CanvasContainer");
var mapView = require("Dune/View/Map");
var shuffleArray = require("Dune/shuffle");
var eventChain = require("Dune/EventChain");

module.exports = BaseTerritoryView;

function BaseTerritoryView(territoryImgName) {

  var loader = new Loader();

  var occupyingFactions = {};

  var circle = mapView.circle;

  var troopIconSize = 8.5;

  var smallCoords = getMapOverviewTerritoryCoordinates();

  var imageUrl = "/img/territories/" + territoryImgName + ".png";
  var image = loader.loadImage(imageUrl);

  loader.onload = function() {
    setImageDimensions();
  }

  function getMapOverviewTerritoryCoordinates() {
    var areaTags = document.getElementsByTagName("area");

    for (var i = 0; i < areaTags.length; i++) {
      var areaTag = areaTags[i];

      if (areaTag.target == "polarSink") {
	var coords = areaTag.coords.split(',');
	return coords;
      }
    }
  }

  function calculateImageScaleFactor() 
  {
    var largestTerritorySide = Math.max(image.width, image.height);
    var imageScaleFactor = 2 * circle.radius / largestTerritorySide;
    return imageScaleFactor;
  }

  function setImageDimensions() {
    var imageScaleFactor = calculateImageScaleFactor();

    image.width *= imageScaleFactor;
    image.height *= imageScaleFactor;
    image.xPos = circle.centerX - image.width/2; 
    image.yPos = circle.centerY - image.height/2;
  }


  this.addFaction = function(troopTokenImg) {

    var faction = troopTokenImg.faction.constructor.name;

    if (occupyingFactions[faction]) {
      occupyingFactions[faction].troops.unshift(troopTokenImg);

    } else {

      occupyingFactions[faction] = {
	"troops": [troopTokenImg]
      };


      var TO_RADIANS = Math.PI/180;

      var troopCircle = {
	"centerX": image.xPos + image.width/2,
	"centerY": image.yPos + image.height/2,
	"radius": 125,
	"angle": 0
      };


      var maxDiscs = 8;
      var maxAngle = 180/maxDiscs * TO_RADIANS;

      var maxTroopRadius = 
	troopCircle.radius / ( (1 - Math.sin(maxAngle)) 
	/ Math.sin(maxAngle) + 2 );

      troopIconSize = maxTroopRadius * 2;

      var numberOfDiscs = Object.keys(occupyingFactions).length
      var centralAngle = 180/numberOfDiscs * TO_RADIANS;

      var steinerCircleRadius = 
	troopCircle.radius / ( (1 - Math.sin(centralAngle)) 
	/ Math.sin(centralAngle) + 2 );

      var innerCircleRadius = steinerCircleRadius * (1/Math.sin(centralAngle) - 1);
      
      var degrees = 360 / numberOfDiscs;
      var distanceFromCenter = 0;
      if (numberOfDiscs != 1)
	//distanceFromCenter = maxTroopRadius + innerCircleRadius;
	distanceFromCenter = troopCircle.radius - maxTroopRadius;

      var i = 0;
      for (var f in occupyingFactions) { 
      	i++;

	troopCircle.angle = (i * degrees * TO_RADIANS); 

	// Rotate the angle for odd disc numbers to keep things symmetrical
	if (numberOfDiscs % 2) troopCircle.angle -= centralAngle/2;



	var x = troopCircle.centerX + Math.cos(troopCircle.angle) 
	  * distanceFromCenter;
	var y = troopCircle.centerY + Math.sin(troopCircle.angle) 
	  * distanceFromCenter;
	
	x -= maxTroopRadius;
	y -= maxTroopRadius;

	occupyingFactions[f].coords = {"x": x, "y": y};

	if (f != faction) {
	  console.log('setting new coords for '+faction);
	  troopTokenImg.xPos = x;
	  troopTokenImg.yPos = y;
	}

	troopTokenImg.width = maxTroopRadius * 2;
	troopTokenImg.height = maxTroopRadius * 2;
      }

    }

    var troopCoords = occupyingFactions[faction].coords
    troopTokenImg.moveToCoord([troopCoords.x, troopCoords.y]);
    troopTokenImg.onHalt = eventChain.next;
  }

  this.enlarge = function() {
    addCanvasClickEvent();
    drawTerritoryImage();
  }

  this.draw = function() {
    drawTerritoryImage();
  }

  function addCanvasClickEvent() {
    var canvas = canvasContainer.layer("notification");
    canvas.addEventListener('click', function(e) {
      canvasContainer.deleteLayer(canvas);
    });
  }

  function drawTerritoryImage() {

    var canvas = canvasContainer.layer("notification");
    context = canvas.getContext("2d");


    context.drawImage(image, 
      image.xPos, image.yPos,
      image.width, image.height
    );

/*    context.strokeStyle = "red";*/
    //context.lineWidth = 5;
    /*context.strokeRect(image.xPos, image.yPos, image.width, image.height);*/

    drawOccupyingFactions();
  }

  function drawOccupyingFactions() {
    for (var factionName in occupyingFactions) {
      var faction = occupyingFactions[factionName];
      var troops = faction.troops;
      var troopIcon = troops[0];
      var troopCoords = faction.coords;

/*      console.log(factionName);*/
      //console.log('troopIcon:');
      //console.dir(troopIcon.xPos + ', ' + troopIcon.yPos);
      //console.log('troopCoords:');
      /*console.dir(troopCoords.x + ', ' + troopCoords.y);*/

     context.drawImage(troopIcon, 
	troopCoords.x, troopCoords.y
	//troopIcon.xPos, troopIcon.yPos
	//,troopIconSize, troopIconSize
	,troopIcon.width, troopIcon.height
      );
      //context.drawImage(troopIcon, 
	//troopIcon.xPos, troopIcon.yPos,
	//troopIcon.width, troopIcon.height
      //);

      var troopCount = troops.length;

      var fontSize = 10;
      
      var textWidth = context.measureText(troopCount).width;

      var xPos = troopCoords.x + troopIconSize/2 - textWidth/2;
      var yPos = troopCoords.y + troopIconSize - fontSize/2;

      context.strokeStyle = "black";
      context.lineWidth = 5;
      context.strokeText(troopCount, xPos, yPos);

      context.fillStyle = "white";
      context.fillText(troopCount, xPos, yPos);
    }

    //var troopCircle = {
      //"centerX": image.xPos + image.width/2,
      //"centerY": image.yPos + image.height/2,
      //"radius": 125,
      //"angle": 0
    //};
    //context.beginPath();
    //context.arc(troopCircle.centerX, troopCircle.centerY, troopCircle.radius,
	//0, 2 * Math.PI);
    //context.stroke();

  }


}
