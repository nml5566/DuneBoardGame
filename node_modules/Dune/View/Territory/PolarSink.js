var Loader = require("Dune/Loader");
var canvasContainer = require("Dune/CanvasContainer");
var mapView = require("Dune/View/Map");
var shuffleArray = require("Dune/shuffle");

module.exports = new PolarSinkView();

function PolarSinkView() {

  //var canvas, context;
  var loader = new Loader();

  var occupyingFactions = {};
  var troopQuadrants;

  var circle = mapView.circle;

  var troopIconSize = 8.5;
  var imageScaleFactor, imageScaleWidth, imageScaleHeight;

  var imageUrl = "/img/territories/polarSink.png";
  var image = loader.loadImage(imageUrl);

  var smallCoords = getMapOverviewTerritoryCoordinates();
  var largeCoords = [];;

  loader.onload = function() {

    var largestSide = Math.max(image.width, image.height);
    imageScaleFactor = 2 * circle.radius / largestSide;

    imageScaleWidth = image.width * imageScaleFactor;
    imageScaleHeight = image.height * imageScaleFactor;

    setImageCoordinates();

    troopQuadrants = calculateTroopQuadrants();
  }

  function getMapOverviewTerritoryCoordinates() {
    var areaTags = document.getElementsByTagName("area");

    for (var i = 0; i < areaTags.length; i++) {
      var areaTag = areaTags[i];

      if (areaTag.target == "polarSink") {
	var coords = areaTag.coords.split(',');
	return coords;
      }
    }
  }

  this.addFaction = function(faction, factionImage) {

    if (occupyingFactions[faction]) {
      occupyingFactions[faction].troops.push(factionImage);

    } else {
      shuffleArray(troopQuadrants);

      occupyingFactions[faction] = {
      	"coords": troopQuadrants.shift(),
      	"scale": troopIconSize,
	"troops": [factionImage]
      };
    }

    return occupyingFactions[faction];
  }

  this.enlarge = function() {
    addCanvasClickEvent();
    drawTerritoryImage(largeCoords);
  }

  this.draw = function() {
    drawTerritoryImage(largeCoords);

  }

  function addCanvasClickEvent() {
    var canvas = canvasContainer.layer("notification");
    canvas.addEventListener('click', function(e) {
      canvasContainer.deleteLayer(canvas);
    });
  }

  function drawTerritoryImage(largeCoords) {

    var canvas = canvasContainer.layer("notification");
    context = canvas.getContext("2d");


    context.drawImage(image, 
      image.xPos, image.yPos,
      image.width, image.height
    );

    context.strokeStyle = "red";
    context.lineWidth = 5;

    //DEBUG draw territory quadrants outline
    for(var i=0 ; i < troopQuadrants.length-1 ; i++ ) {
      var troopQuadrant = troopQuadrants[i];
      context.strokeRect(
      	  troopQuadrant.x, troopQuadrant.y,
      	  troopIconSize, troopIconSize
      );
    }

    //DEBUG draw territory bounding box outline
    context.strokeRect(image.xPos, image.yPos, image.width, image.height);


    for (var factionName in occupyingFactions) {
      var faction = occupyingFactions[factionName];
      var troopIcon = faction.troops[0];
      var troopCoords = faction.coords;

      context.drawImage(troopIcon, 
	troopCoords.x, troopCoords.y
	,troopIconSize, troopIconSize
      );


    }

  }

  function setImageCoordinates() {
    image.xPos = circle.centerX - imageScaleWidth/2; 
    image.yPos = circle.centerY - imageScaleHeight/2;
  }

  function calculateTroopQuadrants() {

    var rectangle = getTerritoryMinimumBoundingRectangle(smallCoords);

    var smallestX = rectangle.x
    var smallestY = rectangle.y

    var width = rectangle.width;
    var height = rectangle.height;

    var canvas = canvasContainer.layer("test");
    var context = canvas.getContext("2d");

    var scale = scaleCoordinatesToEnlargedTerritory(smallCoords, rectangle);

    drawTerritoryOutline(largeCoords, context);

    var quadrants = divideBoundingRectangleIntoQuadrants(scale);

    var troopQuadrants = getQuadrantsInsideTerritoryBoundary(quadrants, context);

    return troopQuadrants;
  }

  function getTerritoryMinimumBoundingRectangle(coords) {

    var smallestX = undefined,
	largestX = undefined, 
	smallestY = undefined,
	largestY = undefined; 

    for( i=2 ; i < coords.length-1 ; i+=2 )
    {
      var x= coords[i], y = coords[i+1];

      if (smallestX == undefined) { smallestX = x }
      else if (x < smallestX) { smallestX = x }

      if (smallestY == undefined) { smallestY = y }
      else if (y < smallestY) { smallestY = y }

      if (largestX == undefined) { largestX = x }
      else if (x > largestX) { largestX = x }

      if (largestY == undefined) { largestY = y }
      else if (y > largestY) { largestY = y }
    }

    var width = largestX - smallestX;
    var height = largestY - smallestY;

    var rectangle = {"x": smallestX, "y": smallestY, 
      "width": width, "height": height};

    return rectangle;
  }

  function scaleCoordinatesToEnlargedTerritory(coords, rectangle) {

    var xShift = coords[0] - image.xPos; 
    var yShift = coords[1] - image.yPos;

    var scaleX = image.width / rectangle.width;
    var scaleY = image.height/ rectangle.height;
    var scale = Math.max(scaleX, scaleY);

    for( i=0 ; i < coords.length-1 ; i+=2 )
    {
      var xShift = (rectangle.x * scale - image.xPos);
      var yShift = (rectangle.y * scale - image.yPos);

      largeCoords[i] = coords[i] * scale;
      largeCoords[i+1] = coords[i+1] * scale;

      largeCoords[i] -= xShift;
      largeCoords[i+1] -= yShift;
    }

    return scale;
  }

  function divideBoundingRectangleIntoQuadrants(coordScale) {
    var quadrants = [];

    troopIconSize *= coordScale;

    smallestX = image.xPos;
    smallestY = image.yPos;
    largestX = image.xPos + image.width;
    largestY = image.yPos + image.height;

    var x = smallestX;
    var y = smallestY;
    

    while (x < largestX && y < largestY) {

      quadrants.push({x: x, y: y});

      x += troopIconSize;

      if (x > largestX) {
	x = smallestX;
	y += troopIconSize;
      }

    }

    return quadrants;
  }

  function getQuadrantsInsideTerritoryBoundary(squarePoints, context) {

    var territorySquares = [];
    for (var i = 0; i < squarePoints.length; i++) {
      var coords = squarePoints[i];

      var topLeft = {"x": coords.x, "y": coords.y};
      var topRight = {"x": coords.x + troopIconSize, "y": coords.y};

      var bottomLeft = {"x": coords.x, "y": coords.y + troopIconSize};
      var bottomRight = 
	{"x": coords.x + troopIconSize, "y": coords.y + troopIconSize};

      if (
	context.isPointInPath(topLeft.x, topLeft.y) 
	&& context.isPointInPath(topRight.x, topRight.y)
	&& context.isPointInPath(bottomLeft.x, bottomLeft.y) 
	&& context.isPointInPath(bottomRight.x, bottomRight.y)
      ) {
	territorySquares.push(topLeft);

      }

    }

    return territorySquares;
  }

}

function drawTerritoryOutline(coords, ctx) {

  ctx.beginPath();
  ctx.moveTo(coords[0], coords[1]);
  for( item=2 ; item < coords.length-1 ; item+=2 ) {
    ctx.lineTo( coords[item] , coords[item+1] )
  }
  ctx.closePath();

}

