module.exports = MapView;

var BaseView = require("./Base");

MapView.prototype = new BaseView();
MapView.prototype.constructor = MapView;

function MapView(controller) {

  var canvas = document.getElementById("gamecanvas");
  canvas.width = 768;
  canvas.height = 1024;

  var view = document.getElementById("mapscreen");
  this.element = document.getElementById("mapscreen");

  var context = canvas.getContext("2d");

  var circle = {centerX:385, centerY:425, radius:338, angle: 0}

  var that = this;

  var stormImage;

  init();

  function init() {
    that.setView(view);
  }

  this.loadImages = function() {
    var stormImageUrl = "img/icons/storm-marker.png";
    stormImage = loader.loadImage(stormImageUrl);

    //stormImage.onload = animateStormSetup;
    //stormImage.onload = placeRectangularStormToken;
    stormImage.onload = tester;

    stormImage.xPos = 0; 
    stormImage.yPos = 0; 
    stormImage.speed = .01; 
    stormImage.radius = 25;
  }

  function tester() {
    var stormQuadrant = controller.game.map.initStormPosition();

    var img = stormImage;

    var w = img.width;
    var h = img.height;

    var x = -w/2;
    var y = -h/2;

    circle.angle = convertQuadrantNumberToMapAngle(stormQuadrant);
    var coordinates = new Array(
	circle.centerX + Math.cos(circle.angle) * circle.radius
	+ x
	,circle.centerY + Math.sin(circle.angle) * circle.radius
	+ y
    );

    context.save();
    context.translate(coordinates[0],coordinates[1]);
    context.translate(img.width/2, img.height/2);
    var TO_RADIANS = Math.PI/180;

    var degreesPerQuadrant = 20;
    var degrees = (stormQuadrant - 3) * degreesPerQuadrant;
    context.rotate(degrees * TO_RADIANS);
    context.drawImage(img, -img.width/2, -img.height/2);
    context.restore();

    setInterval(function() {
      context.clearRect(0, 0, canvas.width, canvas.height);

      var coordinates = new Array(
	  circle.centerX + Math.cos(circle.angle) * circle.radius
	  + x
	  ,circle.centerY + Math.sin(circle.angle) * circle.radius
	  + y
      );

      circle.angle -= img.speed;

      context.save();
      context.translate(coordinates[0],coordinates[1]);
      context.translate(img.width/2, img.height/2);

      var TO_RADIANS = Math.PI/180;

      //var degreesPerQuadrant = 20;
      //var degrees = (stormQuadrant - 3) * degreesPerQuadrant;

      var stormMarkerAngle = 291 * Math.PI/180;
      //console.log(t * 180 / Math.PI);
      var rotation = circle.angle + stormMarkerAngle;
      context.rotate(rotation);

      //console.log(circle.angle * 180 / Math.PI);
      //context.rotate(degrees * TO_RADIANS);
      context.drawImage(img, -img.width/2, -img.height/2);
      context.restore();

      //degrees++;
      //context.save();

      //context.translate(coordinates[0],coordinates[1]);

      //context.translate(img.width/2, img.height/2);

      //var TO_RADIANS = Math.PI/180;
      //context.rotate(degrees * TO_RADIANS);
      //context.drawImage(img, -img.width/2, -img.height/2);
      //context.restore();
    }, 33);
  }

  function placeRectangularStormToken() {
      // pivot point coordinates = the center of the square
      var cx = 200; // (60+200)/2
      var cy = 200; // (60+200)/2

      // Note that the x and y values of the square 
      // are relative to the pivot point.
      var x = -70; // cx + x = 130 - 70 = 60
      var y = -70; // cy + y = 130 - 70 = 60
      var w = 140; // (cx + x) + w = 60 + w = 200
      var h = 140; // (cy + y) + h = 60 + h = 200
      var deg = 0;

      w = stormImage.width;
      h = stormImage.height;

      x = -w/2;
      y = -h/2;

      circle.angle = convertQuadrantNumberToMapAngle(3);
      //var coordinates = calculateStormQuadrantCoordinatesBasedOnMapAngle();
      console.log('a');
      var coordinates = new Array(
	  circle.centerX + Math.cos(circle.angle) * circle.radius
	  + x
	  ,circle.centerY + Math.sin(circle.angle) * circle.radius
	  + y
      );

      console.log(coordinates);
      cx = coordinates[0];
      cy = coordinates[1];

      context.drawImage(stormImage, cx, cy);

      deg = 90;
      context.save();

      context.translate(cx + w, cy - h);
      //context.translate(cx - x, cy - y);
      context.rotate(deg * Math.PI/180);

      context.drawImage(stormImage, 0, 0);
      //context.drawImage(stormImage, x, y);

      context.restore();

/*     setInterval(function() {*/

	//context.clearRect(0, 0, canvas.width, canvas.height);

	//deg++;
	//context.save();

	////context.translate(cx, cy);
	//context.translate(cx - x, cy - y);
	//context.rotate(deg * Math.PI/180);

	//context.drawImage(stormImage, 0, 0);
	////context.drawImage(stormImage, x, y);

	//context.restore();

      /*}, 33);*/
  }

  function animateStormSetup() {
    var stormQuadrant = controller.game.map.initStormPosition();

    circle.angle = convertQuadrantNumberToMapAngle(stormQuadrant);

    var startPoint = new Array(170, 15);

    stormImage.xPos = startPoint[0];
    stormImage.yPos = startPoint[1];


    stormImage.onhalt = function() { controller.startPlayerTurn() }
    moveImageToPoint(stormImage, coordinates);
  }

  function convertQuadrantNumberToMapAngle(quadrantNumber) {
    var degreesPerQuadrant = 20;
    
    /* Dividing by 2 puts the angle in the center of the quadrant */
    var degrees = (quadrantNumber * degreesPerQuadrant) + degreesPerQuadrant/2; 
    var radians = degrees * (Math.PI/180);
    return radians;
  }

  function moveImageToPoint(image, point) {
    var finalX = point[0],
	finalY = point[1];

    image.xStep = (finalX - image.xPos) * image.speed;
    image.yStep = (finalY - image.yPos) * image.speed;

    image.movement = setInterval(function () {
      animateImageMovement(image, [finalX, finalY]);
    }, 10);

  }

  function animateImageMovement(image, point) {
    clearImage(image);

    var x = point[0];
    var y = point[1];

    image.xPos += image.xStep;
    image.yPos += image.yStep;

    context.drawImage(image, image.xPos, image.yPos);

    if (image.yPos + image.yStep >= y) {
      clearInterval(image.movement);
      delete image.movement;
      delete image.xStep;
      delete image.yStep;

      clearImage(image);

      image.xPos = x
      image.yPos = y

      context.drawImage(image, image.xPos, image.yPos);

      if (image.onhalt) {
	  image.onhalt();
	  image.onhalt = undefined;
      }

      //setInterval(animateStormQuadrantMovement, 33);
      //animateStormQuadrantMovement();
    }
  }

  function clearImage(image) {
    context.clearRect(image.xPos, image.yPos,
      image.width, image.height);
  }

  function calculateStormQuadrantCoordinatesBasedOnMapAngle() {
      return new Array(
	circle.centerX + Math.cos(circle.angle) * circle.radius
	  - stormImage.radius,
	circle.centerY + Math.sin(circle.angle) * circle.radius
	- stormImage.radius);
  }

  function  animateStormQuadrantMovement() {

      clearImage(stormImage);

      var coordinates = calculateStormQuadrantCoordinatesBasedOnMapAngle();
      stormImage.xPos = coordinates[0];
      stormImage.yPos = coordinates[1];

      circle.angle -= stormImage.speed;

      context.drawImage(stormImage, stormImage.xPos, stormImage.yPos);
  }

}

var loader = {
    loaded:true,
    loadedCount:0, // Assets that have been loaded so far
    totalCount:0, // Total number of assets that need to be loaded
    
    loadImage:function(url){
        this.totalCount++;
        this.loaded = false;

	var loadingScreen = document.getElementById('loadingscreen');
	loadingScreen.style.display = "block";
        //$('#loadingscreen').show();

        var image = new Image();
        image.src = url;
        image.onload = loader.itemLoaded;
        return image;
    },
    itemLoaded:function(){
        loader.loadedCount++;

	var loadingMessage = document.getElementById('loadingmessage');
        loadingMessage.innerHTML = 
	  'Loaded '+loader.loadedCount+' of '+loader.totalCount;

        if (loader.loadedCount === loader.totalCount){
            // Loader has loaded completely..
            loader.loaded = true;

            // Hide the loading screen 
	    var loadingScreen = document.getElementById('loadingscreen');
	    loadingScreen.style.display = "none";
            //$('#loadingscreen').hide();

            //and call the loader.onload method if it exists
            if(loader.onload){
                loader.onload();
                loader.onload = undefined;
            }
        }
    }
}

