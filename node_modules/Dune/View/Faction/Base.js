module.exports = BaseFactionView;

var Loader = require("Dune/Loader");
var canvasContainer = require("Dune/CanvasContainer");
var eventChain = require("Dune/EventChain");
var BidMenuViewDecorator = require("Dune/View/Faction/Base/BidMenu");

var ViewDecorator = require("../Base");

var treacheryDeckView = require("../Deck/Treachery.js");
var bonusDeckView = require("../Deck/Bonus.js");
var PlayerScreen = require("../PlayerScreen");
var mapView = require("Dune/View/Map");

var TraitorSelect = require("../TraitorSelect.js");

function BaseFactionView(obj, args) {

  ViewDecorator(obj, { "view": undefined });
  BidMenuViewDecorator(obj, args);

  var faction = args.faction,
      images = args.images;

  var traitorSelect = args.traitorSelect || new TraitorSelect();

  //TODO figure out an elegant way to squash this public variable
  obj.faction = faction;

  var playerScreen = new PlayerScreen(args);
  args.playerScreen = playerScreen;

  var factionEmblemImg, 
      factionShieldImg;

  var dealtCard;

  var loader = new Loader();

  obj.loadImages = function() {


    var factionEmblemImgUrl = obj.imagePath + "emblems/" + images.emblem;
    factionEmblemImg = loader.loadImage(factionEmblemImgUrl)

    loadLeaderImages();
    loadBidMenuImages();


    loader.onload = function() {
      showPlayerSeat();

      // DEBUG
      var gameController = require("Dune/Controller");
      gameController.startPlayerBidding();
    };

  }

  function loadLeaderImages() 
  {
    for (var i = 0; i < images.leaders.length; i++) {
      var leaderImgUrl = images.leaderPath + images.leaders[i];
      images.leaders[i] = loader.loadImage(leaderImgUrl);
    }
  }

  function loadBidMenuImages() 
  {
    var bidPortraitImgUrl = obj.imagePath + "bid/" + images.bid;

    images.bid = { };
    images.bid.portrait = loader.loadImage(bidPortraitImgUrl)

    var spiceBidImgUrl = obj.imagePath + "bid/spice.png";
    //var spiceBidImgUrl = obj.imagePath + "icons/spice.png";
    images.bid.spice = loader.loadImage(spiceBidImgUrl)
  }

  obj.startSetupTurn = function() 
  {
    obj.startTurn();
    obj.setupEventChain();
  }

  obj.startTurn = function() 
  {
    playerScreen.hide();
    obj.promptUserStartTurn();
    eventChain.add(function () { playerScreen.show(); eventChain.next() });
  }


  obj.setupEventChain = function() {
    eventChain.add([
      function() { obj.promptUserSelectTraitor() },
      function() { playerScreen.addTraitorCard(obj.dealtCard()) },
      function() { obj.drawTreacheryCard() },
      function() { playerScreen.addTreacheryCard(obj.dealtCard()) },
      function() { obj.shipInitialTroops() }
    ]);
  }

  obj.promptUserStartTurn = function() {


    var loader = new Loader();

    var factionName = faction.constructor.name.toLowerCase() 
    var factionShieldUrl = obj.imagePath + "shields/" + factionName + ".png";
    factionShieldImg = loader.loadImage(factionShieldUrl);

    loader.onload = drawUserPromptNotification;
  }

  function dismissUserPromptNotification(canvas) 
  {
    canvasContainer.deleteLayer(canvas);
    eventChain.next();
  }

  function drawUserPromptNotification() {
    var canvas = canvasContainer.layer("notification");
    canvas.addEventListener("mousedown", function(e) {
      dismissUserPromptNotification(this);
    });
    canvas.redraw = dimScreen;

    factionShieldImg.xPos = 0;
    factionShieldImg.yPos = 0;
    factionShieldImg.canvas = canvas;
    factionShieldImg.width = 768;
    factionShieldImg.height = 352;
    factionShieldImg.speed = 0.02;

    factionShieldImg.yPos = -factionShieldImg.height;

    factionShieldImg.moveToCoord([0,250]);
  }


  function dimScreen() 
  {
    var canvas = this;
    var context = canvas.getContext("2d");
    context.clearRect(0, 0, canvas.width, canvas.height);
    context.fillStyle = "rgba(20, 20, 20, 0.6)";
    context.fillRect(0,0,canvas.width,canvas.height);
  }

  obj.getLeaders = function() { return faction.getLeaders() }

  obj.promptUserSelectTraitor = function() { traitorSelect.promptUser(obj) }

  function showPlayerSeat() 
  {
    var canvas = canvasContainer.layer('playerseat');
    var context = canvas.getContext("2d");

    var circle = mapView.circle;
    circle.angle = mapView.convertSectorNumberToMapAngle(faction.seat);

    var iconOffset = factionEmblemImg.width/2;

    var coordinates = 
      mapView.calculateSectorEdgeFromMapAngle([iconOffset, iconOffset]);

    var x = coordinates[0] - iconOffset;
    var y = coordinates[1] - iconOffset;

    context.drawImage(factionEmblemImg, x, y);
  }


  obj.drawTreacheryCard = function()
  {
    var card = treacheryDeckView.dealCard();
    obj.takeCard(card);
  }

  obj.takeCard = function(cardImage) { dealtCard = cardImage }
  obj.dealtCard = function() { return dealtCard }
}
