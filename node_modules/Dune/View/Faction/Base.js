module.exports = BaseFactionView;

var ViewDecorator = require("../Base");
var PlayerScreen = require("../PlayerScreen");
var promptUserSelectTraitor = require("../TraitorSelect.js");

function BaseFactionView(obj, args) {

  ViewDecorator(obj, { "view": undefined });

  var controller = args.controller,
      faction = args.faction,
      images = args.images;

  //TODO clear out duplicate private variable code in favor of public
  obj.controller = controller;
  obj.faction = faction;

  var playerScreen = new PlayerScreen(obj.controller, images);

  var factionEmblem; 
  var factionShieldImage;

  obj.loadImages = function() {

    var loader = new controller.Loader();

    var factionEmblemUrl = obj.imagePath + "emblems/" + images.emblem;
    factionEmblem = loader.loadImage(factionEmblemUrl)

    var troopIconImgUrl = "/img/icons/troops/" + images.troop;
    images.troop = loader.loadImage(troopIconImgUrl);

    for (var i = 0; i < images.leaders.length; i++) {
      var leaderImgUrl = images.leaderPath + images.leaders[i];
      images.leaders[i] = loader.loadImage(leaderImgUrl);
    }


    loader.onload = function() {
      playerScreen = new PlayerScreen(obj.controller, images);
      obj.drawPlayerSeat();
    };

  }

  obj.promptUserStartTurn = function(onDismiss) {

    canvasContainer = controller.canvasContainer;
    canvas = canvasContainer.layer('notification');
    context = canvas.getContext("2d");

    canvasContainer.moveLayerToTop(canvas);

    canvas.addEventListener("mousedown", function(e) {
      dismissUserPromptNotification(onDismiss);
    });

    var loader = new controller.Loader();

    var factionShieldName = faction.constructor.name.toLowerCase() 
      + "-shield.png"
    var factionShieldUrl = obj.imagePath + factionShieldName;
    factionShieldImage = loader.loadImage(factionShieldUrl);
    factionShieldImage.speed = 0.01;

    loader.onload = drawUserPromptNotification;
  }

  function dismissUserPromptNotification(onDismiss) {
    context.clearRect(0, 0, canvas.width, canvas.height);
    if (onDismiss)
      onDismiss();
  }

  function drawUserPromptNotification() {

    factionShieldImage.xPos = 0;
    factionShieldImage.yPos = 0;

    factionShieldImage.yPos = -factionShieldImage.height;

    moveImageToPoint(factionShieldImage, [0,250]);
  }

  function moveImageToPoint(image, point) {
    var finalX = point[0],
	finalY = point[1];

    image.xStep = (finalX - image.xPos) * image.speed;
    image.yStep = (finalY - image.yPos) * image.speed;

    image.movement = setInterval(function () {
      animateImageMovement(image, [finalX, finalY]);
    }, 10);

  }

  function animateImageMovement(image, point) {
    dimScreen(image);

    var x = point[0];
    var y = point[1];

    image.xPos += image.xStep;
    image.yPos += image.yStep;

    var shieldScaleWidth = 768;
    var shieldScaleHeight = 352;

    context.drawImage(image, 
      image.xPos, image.yPos,
      shieldScaleWidth, shieldScaleHeight
    );

    if (image.yPos + image.yStep >= y) {
      clearInterval(image.movement);
      delete image.movement;
      delete image.xStep;
      delete image.yStep;

      dimScreen(image);

      image.xPos = x
      image.yPos = y

      context.drawImage(image, 
	image.xPos, image.yPos,
	shieldScaleWidth, shieldScaleHeight
      );

      if (image.onhalt) {
	  image.onhalt();
	  image.onhalt = undefined;
      }

    }
  }

  function dimScreen(image) {

    context.clearRect(0, 0, canvas.width, canvas.height);
    context.fillStyle = "rgba(20, 20, 20, 0.6)";
    context.fillRect (0,0,canvas.width,canvas.height);
  }

 
  obj.getLeaders = function() {
    return faction.getLeaders();
  }

  obj.promptUserSelectTraitor = promptUserSelectTraitor;

  obj.drawPlayerSeat = function() {

    var canvas = controller.canvasContainer.layer('playerseat');
    var context = canvas.getContext("2d");

    var mapView = controller.views.map;

    var circle = mapView.circle;
    circle.angle = mapView.convertSectorNumberToMapAngle(faction.seat);

    var iconOffset = factionEmblem.width/2;

    var coordinates = 
      mapView.calculateSectorEdgeFromMapAngle([iconOffset, iconOffset]);

    var x = coordinates[0] - iconOffset;
    var y = coordinates[1] - iconOffset;

    context.drawImage(factionEmblem, x, y);
  }

  obj.startInitialTurn = function() 
  {
    // DEBUG skip all the prompting 
   var onStartTurn = function() { 
      playerScreen.draw();

      var onSelectTraitor = function() 
      {
	playerScreen.addTraitorCard(obj.traitorCardImage);
      }

      obj.promptUserSelectTraitor(onSelectTraitor) 
    };
    this.promptUserStartTurn(onStartTurn);

    //playerScreen.draw();
    //playerScreen.addTreacheryCard();
  }
}
