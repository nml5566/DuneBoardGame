module.exports = BaseFactionView;

var BaseView = require("../Base");
BaseFactionView.prototype = new BaseView();
BaseFactionView.prototype.constructor = BaseFactionView;

function BaseFactionView() {

  var controller, faction;

  var self = this;

  this.setFaction = function(newFaction) {
    faction = newFaction;
  }

  this.setController = function(newController) {
    controller = newController
  }

  this.getController = function() { return controller }

  this.promptUserStartTurn = function(onDismiss) {
    console.log('prompt user');
    var that = this;

    var viewElement = controller.views.map.element;

    var shieldImage = new Image();
    // TODO set shield image source when assets are in place
    shieldImage.alt = faction.constructor.name + " turn";
    shieldImage.style.cursor = "pointer";
    shieldImage.style.color = "black";
    shieldImage.style.backgroundColor = "white";
    shieldImage.style.fontSize = "100px";
    
    shieldImage.onclick = dismissUserStartPrompt;

    function dismissUserStartPrompt() {
      viewElement.removeChild(this);
      onDismiss();
    }

    viewElement.appendChild(shieldImage);
  }

/*  function getMapViewElement() {*/
    //var controller = self.getController();
    //var mapView = controller.getMapView();
    //var viewElement = mapView.getView();
    //return viewElement;
  /*}*/

  this._startInitialTurn = function() {
    throw new Error('Method must be implemented by child class');
  }

  this.getLeaders = function() {
    return faction.getLeaders();
  }

  this.promptUserSelectTraitor = function() {
    var controller = this.getController();
    var traitorHand = controller.dealTraitorHand();
    displayTraitorCards(traitorHand);

  }

  function displayTraitorCards(traitorHand) {
    var mapViewElement = getMapViewElement();

    var traitorSelectionContainer = document.createElement("div");
    var title = document.createElement("p");

    var titleText = document.createTextNode("Choose a traitor");
    title.style.color = "black";
    title.style.backgroundColor = "white";
    title.style.fontSize = "50px";

    title.appendChild(titleText);
    traitorSelectionContainer.appendChild(title);
    mapViewElement.appendChild(traitorSelectionContainer);

    makeTraitorCardImages(traitorHand, traitorSelectionContainer);


  }

  function makeTraitorCardImages(traitorHand, traitorSelectionContainer) {
    var mapViewElement = getMapViewElement();

    var traitorCardImages = new Array();

    for (var i = 0; i < traitorHand.length; i++) {
      var traitorCard = traitorHand[i];

      var traitorCardImage = new Image();
      traitorCardImage.alt = traitorCard.name;
      traitorCardImage.style.cursor = "pointer";
      traitorCardImage.style.color = "black";
      traitorCardImage.style.backgroundColor = "white";
      traitorCardImage.style.fontSize = "100px";

      traitorCardImage.onclick = function() {
      	self.selectTraitor(traitorCardImage.alt);
	mapViewElement.removeChild(traitorSelectionContainer);
      }

      traitorCardImages.push(traitorCardImage);

      traitorSelectionContainer.appendChild(traitorCardImage);
    }

  }

  this.selectTraitor = function(traitorName) {
    faction.setTraitor(traitorName);
  }

}
