module.exports = BaseFactionView;

var ViewDecorator = require("../Base");

function BaseFactionView(obj, args) {

  ViewDecorator(obj, { "view": undefined });

  var controller = args.controller,
      faction = args.faction,
      icon = args.icon;

  var factionIcon; 

  var self = this;

  obj.loadImages = function() {

    var loader = new controller.Loader();

    var factionIconUrl = obj.iconPath + icon;
    factionIcon = loader.loadImage(factionIconUrl)

    loader.onload = function() {
      obj.drawPlayerSeat();
    };

  }

  obj.promptUserStartTurn = function(onDismiss) {
    console.log('prompt user');
    var that = this;

    var viewElement = controller.views.map.element;

    var shieldImage = new Image();
    // TODO set shield image source when assets are in place
    shieldImage.alt = faction.constructor.name + " turn";
    shieldImage.style.cursor = "pointer";
    shieldImage.style.color = "black";
    shieldImage.style.backgroundColor = "white";
    shieldImage.style.fontSize = "100px";
    
    shieldImage.onclick = dismissUserStartPrompt;

    function dismissUserStartPrompt() {
      viewElement.removeChild(this);
      onDismiss();
    }

    viewElement.appendChild(shieldImage);
  }

  obj._startInitialTurn = function() {
    throw new Error('Method must be implemented by child class');
  }

  obj.getLeaders = function() {
    return faction.getLeaders();
  }

  obj.promptUserSelectTraitor = function() {
    var controller = this.getController();
    var traitorHand = controller.dealTraitorHand();
    displayTraitorCards(traitorHand);

  }

  function displayTraitorCards(traitorHand) {
    var mapViewElement = getMapViewElement();

    var traitorSelectionContainer = document.createElement("div");
    var title = document.createElement("p");

    var titleText = document.createTextNode("Choose a traitor");
    title.style.color = "black";
    title.style.backgroundColor = "white";
    title.style.fontSize = "50px";

    title.appendChild(titleText);
    traitorSelectionContainer.appendChild(title);
    mapViewElement.appendChild(traitorSelectionContainer);

    makeTraitorCardImages(traitorHand, traitorSelectionContainer);


  }

  function makeTraitorCardImages(traitorHand, traitorSelectionContainer) {
    var mapViewElement = getMapViewElement();

    var traitorCardImages = new Array();

    for (var i = 0; i < traitorHand.length; i++) {
      var traitorCard = traitorHand[i];

      var traitorCardImage = new Image();
      traitorCardImage.alt = traitorCard.name;
      traitorCardImage.style.cursor = "pointer";
      traitorCardImage.style.color = "black";
      traitorCardImage.style.backgroundColor = "white";
      traitorCardImage.style.fontSize = "100px";

      traitorCardImage.onclick = function() {
      	self.selectTraitor(traitorCardImage.alt);
	mapViewElement.removeChild(traitorSelectionContainer);
      }

      traitorCardImages.push(traitorCardImage);

      traitorSelectionContainer.appendChild(traitorCardImage);
    }

  }

  obj.selectTraitor = function(traitorName) {
    faction.setTraitor(traitorName);
  }

  obj.drawPlayerSeat = function() {

    var canvas = controller.canvasContainer.layer('playerseat');
    var context = canvas.getContext("2d");

    var mapView = controller.views.map;

    var circle = mapView.circle;
    circle.angle = mapView.convertSectorNumberToMapAngle(faction.seat);

    var iconOffset = factionIcon.width/2;

    var coordinates = 
      mapView.calculateSectorEdgeFromMapAngle([iconOffset, iconOffset]);

    var x = coordinates[0] - iconOffset;
    var y = coordinates[1] - iconOffset;

    context.drawImage(factionIcon, x, y);
  }
}
