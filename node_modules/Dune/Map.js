module.exports = ArrakisMap;

function ArrakisMap() {
  var my = this;
  var cache = {};

  my.getTerritory = function(territoryName) {

    if (! cache[territoryName]) {
      var territory = getArrakisTerritory(territoryName);
      territory.map = this;
      cache[territoryName] = territory;
    }

    return cache[territoryName];
  }


  return my;
}

function getArrakisTerritory(territoryName) {

  switch(territoryName) {
    case "PolarSink":
      return new PolarSink();
    case "CielagoNorth":
      return new CielagoNorth();
    case "CielagoEast":
      return new CielagoEast();
    case "CielagoDepression":
      return new CielagoDepression();
    case "CielagoWest":
      return new CielagoWest();
    case "Arsunt":
      return new Arsunt();
    case "ImperialBasin":
      return new ImperialBasin();
    case "FalseWallEast":
      return new FalseWallEast();
    case "FalseWallSouth":
      return new FalseWallSouth();
    case "HargPass":
      return new HargPass();
    case "WindPassNorth":
      return new WindPassNorth();
    case "WindPass":
      return new WindPass();
    case "HaggaBasin":
      return new HaggaBasin();
    case "Carthag":
      return new Carthag();
    case "Tsimpo":
      return new Tsimpo();
    case "PlasticBasin":
      return new PlasticBasin();
    case "ShieldWall":
      return new ShieldWall();
    case "TheMinorErg":
      return new TheMinorErg();

    default:
      throw new Error("Invalid territory: " + territoryName);
  }
}

function BaseTerritory() {
  var my = this;

  var occupyingFactions = [];
  var neighbors = [];


  my.getNeighbors = function() {
    loadNeighbors(this);
    return neighbors;
  }

  my.getNeighbor = function(neighborName) {
    loadNeighbors(this);

    for (var i = 0; i < neighbors.length; i++) {
      var neighbor = neighbors[i];
      if (neighbor.constructor.name === neighborName) 
      return neighbor;

    }

    throw new Error(
      "Invalid neighbor of " + this.constructor.name + ": " + neighborName 
    );

  };

  function loadNeighbors(that) {
  /* Set neighbors only when we need them */
    if (! neighbors.length) that.setNeighbors();
  }

  my.setNeighbors = function(neighborList) {
  /* setNeighbors() is a lazy load function that should only be called after
   * loadNeighbors() */
    
    this.setNeighbors = function() {
    /* Override setNeighbors() so it always uses the predetermined neighbor list 
     * passed in by the territory function at construction time */
      convertNeighborListToTerritories(this, neighborList);
    }

    function convertNeighborListToTerritories(that, neighborList) {
      var newNeighbors = [];
      for (var i = 0; i < neighborList.length; i++) {
	var neighbor = neighborList[i];
	var territory = that.map.getTerritory(neighbor);
	newNeighbors.push(territory);
      }
      neighbors = newNeighbors;
    }
  };

  my.getFactions = function() {
    return occupyingFactions;
  };

  my.occupyWith = function(troops) {
    occupyingFactions.push(troops);
  }

  return my;
}


PolarSink.prototype = new BaseTerritory();
PolarSink.prototype.constructor = PolarSink;

function PolarSink() {

  var my = this;
  my.name = "Polar Sink";

  var neighbors = new Array(
    "Arsunt", "ImperialBasin", "FalseWallEast", "HargPass", 
    "CielagoNorth", "WindPassNorth", "WindPass", "HaggaBasin"
  );

  my.setNeighbors(neighbors);
}

Arsunt.prototype = new BaseTerritory();
Arsunt.prototype.constructor = Arsunt;

function Arsunt() { 
  this.name = "Arsunt";

  var neighbors = new Array(
    "Carthag", "ImperialBasin", "PolarSink", "HaggaBasin"
  );

  this.setNeighbors(neighbors);
}

ImperialBasin.prototype = new BaseTerritory();
ImperialBasin.prototype.constructor = ImperialBasin;

function ImperialBasin() { 
  this.name = "Imperial Basin";
  var neighbors = new Array(
    "OldGap", "Arrakeen", "RimWallWest", "HoleInTheRock", "ShieldWall", 
    "FalseWallEast", "PolarSink", "Arsunt", "Carthag", "Tsimpo"
  );
  this.setNeighbors(neighbors);
}

FalseWallEast.prototype = new BaseTerritory();
FalseWallEast.prototype.constructor = FalseWallEast;

function FalseWallEast() { 
  this.name = "False Wall East";
  var neighbors = new Array(
    "ImperialBasin", "ShieldWall", "TheMinorErg", "HargPass", "PolarSink"
  );
  this.setNeighbors(neighbors);
}

function FalseWallSouth() { }

HargPass.prototype = new BaseTerritory();
HargPass.prototype.constructor = HargPass;

function HargPass() { 
  this.name = "Harg Pass";
  var neighbors = new Array(
    "FalseWallEast", "TheMinorErg", "FalseWallSouth", "CielagoNorth", 
    "PolarSink"
  );
  this.setNeighbors(neighbors);
}

CielagoNorth.prototype = new BaseTerritory();
CielagoNorth.prototype.constructor = CielagoNorth;

function CielagoNorth() { 
  this.name = "Cielago North";

  var neighbors = new Array(
    "PolarSink", "HargPass", "FalseWallSouth", "CielagoEast", 
    "CielagoDepression", "CielagoWest", "WindPassNorth" );

  this.setNeighbors(neighbors);

}

CielagoEast.prototype = new BaseTerritory();
CielagoEast.prototype.constructor = CielagoEast;

function CielagoEast() { 
  this.name = "Cielago East";
  var neighbors = new Array(
    "FalseWallSouth", "SouthMesa", "CielagoSouth", "CielagoDepression", 
    "CielagoNorth"
  );
}

CielagoDepression.prototype = new BaseTerritory();
CielagoDepression.prototype.constructor = CielagoDepression;

function CielagoDepression() { 
  this.name = "Cielago Depression";
  var neighbors = new Array(
    "CielagoNorth", "CielagoEast", "CielagoSouth", "Meridian", "CielagoWest"
  );
  this.setNeighbors(neighbors);
}

function CielagoWest() { }

function WindPassNorth() { }

WindPass.prototype = new BaseTerritory();
WindPass.prototype.constructor = WindPass;

function WindPass() { 
  this.name = "Wind Pass";

  var neighbors = new Array(
    "HaggaBasin", "PolarSink", "WindPassNorth", "CielagoWest", "FalseWallWest",
    "TheGreaterFlat", "TheGreatFlat", "PlasticBasin"
  );
  this.setNeighbors(neighbors);
}

HaggaBasin.prototype = new BaseTerritory();
HaggaBasin.prototype.constructor = HaggaBasin;

function HaggaBasin() { 
  this.name = "Hagga Basin";

  var neighbors = new Array(
    "Tsimpo", "Carthag", "Arsunt", "PolarSink", "WindPass", "PlasticBasin"
  );
  this.setNeighbors(neighbors);
}

Carthag.prototype = new BaseTerritory();
Carthag.prototype.constructor = Carthag;

function Carthag() { 
  this.name = "Carthag";

  var neighbors = new Array(
    "Tsimpo", "ImperialBasin", "Arsunt", "HaggaBasin"
  );

  this.setNeighbors(neighbors);
}

PlasticBasin.prototype = new BaseTerritory();
PlasticBasin.prototype.constructor = PlasticBasin;

function PlasticBasin() { 
  this.name = "Plastic Basin";

  var neighbors = new Array(
      "BrokenLand", "Tsimpo", "HaggaBasin", "WindPass", "TheGreatFlat", 
      "FuneralPlain", "BightOfTheCliff", "SietchTabr", "RockOutcropping"
  );

  this.setNeighbors(neighbors);
}

ShieldWall.prototype = new BaseTerritory();
ShieldWall.prototype.constructor = ShieldWall;

function ShieldWall() { 
  this.name = "Shield Wall";

  var neighbors = new Array(
    "HoleInTheRock", "SihayaRidge", "GaraKulon", "PastyMesa", "TheMinorErg",
    "FalseWallEast", "ImperialBasin"
  );

  this.setNeighbors(neighbors);
}

TheMinorErg.prototype = new BaseTerritory();
TheMinorErg.prototype.constructor = TheMinorErg;

function TheMinorErg() { 
  this.name = "The Minor Erg";

  var neighbors = new Array(
    "ShieldWall", "PastyMesa", "FalseWallSouth", "HargPass", "FalseWallEast"
  );

  this.setNeighbors(neighbors);
}

Tsimpo.prototype = new BaseTerritory();
Tsimpo.prototype.constructor = Tsimpo;

function Tsimpo() { 
  this.name = "Tsimpo";

  var neighbors = new Array(
    "BrokenLand", "OldGap", "ImperialBasin", "Carthag", "HaggaBasin", 
    "PlasticBasin"
  );

  this.setNeighbors(neighbors);
}

