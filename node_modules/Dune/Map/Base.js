module.exports = BaseTerritory;

function BaseTerritory() {

  var occupation = [];
  var neighbors = [];

  this.getNeighbors = function() {
    _initNeighbors(this);
    return neighbors;
  }

  this.getNeighbor = function(neighborName) {
    _initNeighbors(this);

    for (var i = 0; i < neighbors.length; i++) {
      var neighbor = neighbors[i];
      if (neighbor.constructor.name === neighborName) 
      return neighbor;

    }

    throw new Error(
      "Invalid neighbor of " + this.constructor.name + ": " + neighborName 
    );

  };

  function _initNeighbors(that) {
  /* Lazy load function. Set neighbors only when we need them */
    if (! neighbors.length) that.setNeighbors();
  }

  this.setNeighbors = _trapNeighborListInTerritoryFunctionScope;

  function _trapNeighborListInTerritoryFunctionScope(neighborList) {
    /* Give territory neighbor list access without public exposing it */
    var that = this;
    this.setNeighbors = function() {
      neighbors = _convertNeighborListToTerritories(that, neighborList);
    }

  };

  function _convertNeighborListToTerritories(that, neighborList) {
    var newNeighbors = [];
    var map = that.getMap();

    for (var i = 0; i < neighborList.length; i++) {
      var neighbor = neighborList[i];
      var territory = map.getTerritory(neighbor);

      newNeighbors.push(territory);
    }

    return newNeighbors;
  }

  this.getFactions = function() {
    return occupation;
  };

  this.clearFactions = function() {
    occupations = [];
  }

  this.occupy = function(newTroops) {

    if (occupation.length) {
      for (var i = 0; i < occupation.length; i++) {
	var occupyingTroops = occupation[i];
	if (occupyingTroops.getFaction() === newTroops.getFaction()) {
	  occupyingTroops.mergeWith(newTroops);
	  return;
	}     
      }

      var map = this.getMap();
      map.addConflict(this);
      occupation.push(newTroops);

    } else {
      occupation.push(newTroops);
    }
  }

  return this;
}
