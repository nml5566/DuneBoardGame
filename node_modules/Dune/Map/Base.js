module.exports = BaseTerritory;

function BaseTerritory() {

  var occupation = [];
  var neighbors = [];

  this.getNeighbors = function() {
    initNeighbors(this);
    return neighbors;
  }

  this.getNeighbor = function(neighborName) {
    initNeighbors(this);

    for (var i = 0; i < neighbors.length; i++) {
      var neighbor = neighbors[i];
      if (neighbor.constructor.name === neighborName) 
      return neighbor;

    }

    throw new Error(
      "Invalid neighbor of " + this.constructor.name + ": " + neighborName 
    );

  };

  function initNeighbors(that, arrakisMap) {
  /* Set neighbors only when we need them */
    if (! neighbors.length) that.setNeighbors(arrakisMap);
  }

  /* setNeighbors() is a lazy load function that should only be called after
   * initNeighbors() */
  this.setNeighbors = trapNeighborListInTerritoryFunctionScope;

  function trapNeighborListInTerritoryFunctionScope(neighborList) {
    /* TO give territory neighbor list access without public exposing it */
    
    this.setNeighbors = function(arrakisMap) {
      convertNeighborListToTerritories(arrakisMap, neighborList);
    }

    function convertNeighborListToTerritories(arrakisMap, neighborList) {
      var newNeighbors = [];

      for (var i = 0; i < neighborList.length; i++) {
	var neighbor = neighborList[i];
	var territory = arrakisMap.getTerritory(neighbor);

	newNeighbors.push(territory);
      }

      neighbors = newNeighbors;
    }
  };

  this.getFactions = function() {
    return occupation;
  };

  this.occupy = function(newTroops) {
   for (var i = 0; i < occupation.length; i++) {
      var occupyingTroops = occupation[i];
      if (occupyingTroops.getFaction() === newTroops.getFaction()) {
	occupyingTroops.mergeWith(newTroops);
	return;
      }
    }

    occupation.push(newTroops);
  }

  return this;
}
